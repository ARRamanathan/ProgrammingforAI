2023-05-03 10:20:31,320:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-03 10:20:31,321:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-03 10:20:31,321:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-03 10:20:31,321:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-03 10:20:33,011:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-05-03 10:20:39,627:INFO:PyCaret ClassificationExperiment
2023-05-03 10:20:39,628:INFO:Logging name: clf-default-name
2023-05-03 10:20:39,628:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-05-03 10:20:39,628:INFO:version 3.0.0
2023-05-03 10:20:39,628:INFO:Initializing setup()
2023-05-03 10:20:39,628:INFO:self.USI: c908
2023-05-03 10:20:39,628:INFO:self._variable_keys: {'target_param', 'y_train', 'y', 'is_multiclass', 'USI', 'gpu_n_jobs_param', 'gpu_param', 'fold_groups_param', 'memory', 'idx', 'seed', 'exp_id', '_available_plots', 'fix_imbalance', 'X', 'exp_name_log', '_ml_usecase', 'data', 'logging_param', 'html_param', 'n_jobs_param', 'pipeline', 'log_plots_param', 'X_test', 'X_train', 'y_test', 'fold_generator', 'fold_shuffle_param'}
2023-05-03 10:20:39,628:INFO:Checking environment
2023-05-03 10:20:39,628:INFO:python_version: 3.10.9
2023-05-03 10:20:39,628:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2023-05-03 10:20:39,628:INFO:machine: AMD64
2023-05-03 10:20:39,628:INFO:platform: Windows-10-10.0.22621-SP0
2023-05-03 10:20:39,628:INFO:Memory: svmem(total=16760946688, available=7222112256, percent=56.9, used=9538834432, free=7222112256)
2023-05-03 10:20:39,628:INFO:Physical Core: 4
2023-05-03 10:20:39,629:INFO:Logical Core: 8
2023-05-03 10:20:39,629:INFO:Checking libraries
2023-05-03 10:20:39,629:INFO:System:
2023-05-03 10:20:39,629:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2023-05-03 10:20:39,629:INFO:executable: c:\Users\DELL\anaconda3\python.exe
2023-05-03 10:20:39,629:INFO:   machine: Windows-10-10.0.22621-SP0
2023-05-03 10:20:39,629:INFO:PyCaret required dependencies:
2023-05-03 10:20:39,629:INFO:                 pip: 22.3.1
2023-05-03 10:20:39,629:INFO:          setuptools: 65.6.3
2023-05-03 10:20:39,629:INFO:             pycaret: 3.0.0
2023-05-03 10:20:39,629:INFO:             IPython: 8.10.0
2023-05-03 10:20:39,629:INFO:          ipywidgets: 7.6.5
2023-05-03 10:20:39,629:INFO:                tqdm: 4.64.1
2023-05-03 10:20:39,629:INFO:               numpy: 1.23.5
2023-05-03 10:20:39,629:INFO:              pandas: 1.5.3
2023-05-03 10:20:39,629:INFO:              jinja2: 3.1.2
2023-05-03 10:20:39,629:INFO:               scipy: 1.10.0
2023-05-03 10:20:39,629:INFO:              joblib: 1.2.0
2023-05-03 10:20:39,629:INFO:             sklearn: 1.2.1
2023-05-03 10:20:39,629:INFO:                pyod: 1.0.9
2023-05-03 10:20:39,630:INFO:            imblearn: 0.10.1
2023-05-03 10:20:39,630:INFO:   category_encoders: 2.6.0
2023-05-03 10:20:39,630:INFO:            lightgbm: 3.3.5
2023-05-03 10:20:39,630:INFO:               numba: 0.56.4
2023-05-03 10:20:39,630:INFO:            requests: 2.28.1
2023-05-03 10:20:39,630:INFO:          matplotlib: 3.7.0
2023-05-03 10:20:39,630:INFO:          scikitplot: 0.3.7
2023-05-03 10:20:39,630:INFO:         yellowbrick: 1.5
2023-05-03 10:20:39,630:INFO:              plotly: 5.9.0
2023-05-03 10:20:39,630:INFO:             kaleido: 0.2.1
2023-05-03 10:20:39,630:INFO:         statsmodels: 0.13.5
2023-05-03 10:20:39,630:INFO:              sktime: 0.18.0
2023-05-03 10:20:39,630:INFO:               tbats: 1.1.3
2023-05-03 10:20:39,630:INFO:            pmdarima: 2.0.3
2023-05-03 10:20:39,630:INFO:              psutil: 5.9.0
2023-05-03 10:20:39,630:INFO:PyCaret optional dependencies:
2023-05-03 10:20:39,643:INFO:                shap: Not installed
2023-05-03 10:20:39,643:INFO:           interpret: Not installed
2023-05-03 10:20:39,643:INFO:                umap: Not installed
2023-05-03 10:20:39,643:INFO:    pandas_profiling: Not installed
2023-05-03 10:20:39,643:INFO:  explainerdashboard: Not installed
2023-05-03 10:20:39,643:INFO:             autoviz: Not installed
2023-05-03 10:20:39,643:INFO:           fairlearn: Not installed
2023-05-03 10:20:39,643:INFO:             xgboost: Not installed
2023-05-03 10:20:39,643:INFO:            catboost: Not installed
2023-05-03 10:20:39,643:INFO:              kmodes: Not installed
2023-05-03 10:20:39,643:INFO:             mlxtend: Not installed
2023-05-03 10:20:39,643:INFO:       statsforecast: Not installed
2023-05-03 10:20:39,643:INFO:        tune_sklearn: Not installed
2023-05-03 10:20:39,643:INFO:                 ray: Not installed
2023-05-03 10:20:39,643:INFO:            hyperopt: Not installed
2023-05-03 10:20:39,643:INFO:              optuna: Not installed
2023-05-03 10:20:39,644:INFO:               skopt: Not installed
2023-05-03 10:20:39,644:INFO:              mlflow: Not installed
2023-05-03 10:20:39,644:INFO:              gradio: Not installed
2023-05-03 10:20:39,644:INFO:             fastapi: Not installed
2023-05-03 10:20:39,644:INFO:             uvicorn: Not installed
2023-05-03 10:20:39,644:INFO:              m2cgen: Not installed
2023-05-03 10:20:39,644:INFO:           evidently: Not installed
2023-05-03 10:20:39,644:INFO:               fugue: Not installed
2023-05-03 10:20:39,644:INFO:           streamlit: Not installed
2023-05-03 10:20:39,644:INFO:             prophet: Not installed
2023-05-03 10:20:39,644:INFO:None
2023-05-03 10:20:39,644:INFO:Set up data.
2023-05-03 10:22:18,154:INFO:PyCaret ClassificationExperiment
2023-05-03 10:22:18,154:INFO:Logging name: clf-default-name
2023-05-03 10:22:18,154:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-05-03 10:22:18,154:INFO:version 3.0.0
2023-05-03 10:22:18,154:INFO:Initializing setup()
2023-05-03 10:22:18,154:INFO:self.USI: c9b7
2023-05-03 10:22:18,154:INFO:self._variable_keys: {'target_param', 'y_train', 'y', 'is_multiclass', 'USI', 'gpu_n_jobs_param', 'gpu_param', 'fold_groups_param', 'memory', 'idx', 'seed', 'exp_id', '_available_plots', 'fix_imbalance', 'X', 'exp_name_log', '_ml_usecase', 'data', 'logging_param', 'html_param', 'n_jobs_param', 'pipeline', 'log_plots_param', 'X_test', 'X_train', 'y_test', 'fold_generator', 'fold_shuffle_param'}
2023-05-03 10:22:18,154:INFO:Checking environment
2023-05-03 10:22:18,154:INFO:python_version: 3.10.9
2023-05-03 10:22:18,155:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2023-05-03 10:22:18,155:INFO:machine: AMD64
2023-05-03 10:22:18,155:INFO:platform: Windows-10-10.0.22621-SP0
2023-05-03 10:22:18,155:INFO:Memory: svmem(total=16760946688, available=7259000832, percent=56.7, used=9501945856, free=7259000832)
2023-05-03 10:22:18,155:INFO:Physical Core: 4
2023-05-03 10:22:18,155:INFO:Logical Core: 8
2023-05-03 10:22:18,155:INFO:Checking libraries
2023-05-03 10:22:18,155:INFO:System:
2023-05-03 10:22:18,155:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2023-05-03 10:22:18,155:INFO:executable: c:\Users\DELL\anaconda3\python.exe
2023-05-03 10:22:18,155:INFO:   machine: Windows-10-10.0.22621-SP0
2023-05-03 10:22:18,155:INFO:PyCaret required dependencies:
2023-05-03 10:22:18,155:INFO:                 pip: 22.3.1
2023-05-03 10:22:18,155:INFO:          setuptools: 65.6.3
2023-05-03 10:22:18,155:INFO:             pycaret: 3.0.0
2023-05-03 10:22:18,155:INFO:             IPython: 8.10.0
2023-05-03 10:22:18,155:INFO:          ipywidgets: 7.6.5
2023-05-03 10:22:18,156:INFO:                tqdm: 4.64.1
2023-05-03 10:22:18,156:INFO:               numpy: 1.23.5
2023-05-03 10:22:18,156:INFO:              pandas: 1.5.3
2023-05-03 10:22:18,156:INFO:              jinja2: 3.1.2
2023-05-03 10:22:18,156:INFO:               scipy: 1.10.0
2023-05-03 10:22:18,156:INFO:              joblib: 1.2.0
2023-05-03 10:22:18,156:INFO:             sklearn: 1.2.1
2023-05-03 10:22:18,156:INFO:                pyod: 1.0.9
2023-05-03 10:22:18,156:INFO:            imblearn: 0.10.1
2023-05-03 10:22:18,156:INFO:   category_encoders: 2.6.0
2023-05-03 10:22:18,156:INFO:            lightgbm: 3.3.5
2023-05-03 10:22:18,156:INFO:               numba: 0.56.4
2023-05-03 10:22:18,156:INFO:            requests: 2.28.1
2023-05-03 10:22:18,156:INFO:          matplotlib: 3.7.0
2023-05-03 10:22:18,156:INFO:          scikitplot: 0.3.7
2023-05-03 10:22:18,156:INFO:         yellowbrick: 1.5
2023-05-03 10:22:18,156:INFO:              plotly: 5.9.0
2023-05-03 10:22:18,156:INFO:             kaleido: 0.2.1
2023-05-03 10:22:18,156:INFO:         statsmodels: 0.13.5
2023-05-03 10:22:18,157:INFO:              sktime: 0.18.0
2023-05-03 10:22:18,157:INFO:               tbats: 1.1.3
2023-05-03 10:22:18,157:INFO:            pmdarima: 2.0.3
2023-05-03 10:22:18,157:INFO:              psutil: 5.9.0
2023-05-03 10:22:18,157:INFO:PyCaret optional dependencies:
2023-05-03 10:22:18,157:INFO:                shap: Not installed
2023-05-03 10:22:18,157:INFO:           interpret: Not installed
2023-05-03 10:22:18,157:INFO:                umap: Not installed
2023-05-03 10:22:18,157:INFO:    pandas_profiling: Not installed
2023-05-03 10:22:18,157:INFO:  explainerdashboard: Not installed
2023-05-03 10:22:18,157:INFO:             autoviz: Not installed
2023-05-03 10:22:18,157:INFO:           fairlearn: Not installed
2023-05-03 10:22:18,157:INFO:             xgboost: Not installed
2023-05-03 10:22:18,157:INFO:            catboost: Not installed
2023-05-03 10:22:18,157:INFO:              kmodes: Not installed
2023-05-03 10:22:18,157:INFO:             mlxtend: Not installed
2023-05-03 10:22:18,157:INFO:       statsforecast: Not installed
2023-05-03 10:22:18,158:INFO:        tune_sklearn: Not installed
2023-05-03 10:22:18,158:INFO:                 ray: Not installed
2023-05-03 10:22:18,158:INFO:            hyperopt: Not installed
2023-05-03 10:22:18,158:INFO:              optuna: Not installed
2023-05-03 10:22:18,158:INFO:               skopt: Not installed
2023-05-03 10:22:18,158:INFO:              mlflow: Not installed
2023-05-03 10:22:18,158:INFO:              gradio: Not installed
2023-05-03 10:22:18,158:INFO:             fastapi: Not installed
2023-05-03 10:22:18,158:INFO:             uvicorn: Not installed
2023-05-03 10:22:18,158:INFO:              m2cgen: Not installed
2023-05-03 10:22:18,158:INFO:           evidently: Not installed
2023-05-03 10:22:18,158:INFO:               fugue: Not installed
2023-05-03 10:22:18,158:INFO:           streamlit: Not installed
2023-05-03 10:22:18,158:INFO:             prophet: Not installed
2023-05-03 10:22:18,158:INFO:None
2023-05-03 10:22:18,158:INFO:Set up data.
2023-05-03 10:23:17,395:INFO:PyCaret ClassificationExperiment
2023-05-03 10:23:17,396:INFO:Logging name: clf-default-name
2023-05-03 10:23:17,396:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-05-03 10:23:17,396:INFO:version 3.0.0
2023-05-03 10:23:17,396:INFO:Initializing setup()
2023-05-03 10:23:17,396:INFO:self.USI: 1170
2023-05-03 10:23:17,396:INFO:self._variable_keys: {'target_param', 'y_train', 'y', 'is_multiclass', 'USI', 'gpu_n_jobs_param', 'gpu_param', 'fold_groups_param', 'memory', 'idx', 'seed', 'exp_id', '_available_plots', 'fix_imbalance', 'X', 'exp_name_log', '_ml_usecase', 'data', 'logging_param', 'html_param', 'n_jobs_param', 'pipeline', 'log_plots_param', 'X_test', 'X_train', 'y_test', 'fold_generator', 'fold_shuffle_param'}
2023-05-03 10:23:17,396:INFO:Checking environment
2023-05-03 10:23:17,396:INFO:python_version: 3.10.9
2023-05-03 10:23:17,396:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2023-05-03 10:23:17,396:INFO:machine: AMD64
2023-05-03 10:23:17,396:INFO:platform: Windows-10-10.0.22621-SP0
2023-05-03 10:23:17,396:INFO:Memory: svmem(total=16760946688, available=7216365568, percent=56.9, used=9544581120, free=7216365568)
2023-05-03 10:23:17,396:INFO:Physical Core: 4
2023-05-03 10:23:17,396:INFO:Logical Core: 8
2023-05-03 10:23:17,396:INFO:Checking libraries
2023-05-03 10:23:17,396:INFO:System:
2023-05-03 10:23:17,396:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2023-05-03 10:23:17,397:INFO:executable: c:\Users\DELL\anaconda3\python.exe
2023-05-03 10:23:17,397:INFO:   machine: Windows-10-10.0.22621-SP0
2023-05-03 10:23:17,397:INFO:PyCaret required dependencies:
2023-05-03 10:23:17,397:INFO:                 pip: 22.3.1
2023-05-03 10:23:17,397:INFO:          setuptools: 65.6.3
2023-05-03 10:23:17,397:INFO:             pycaret: 3.0.0
2023-05-03 10:23:17,397:INFO:             IPython: 8.10.0
2023-05-03 10:23:17,397:INFO:          ipywidgets: 7.6.5
2023-05-03 10:23:17,397:INFO:                tqdm: 4.64.1
2023-05-03 10:23:17,397:INFO:               numpy: 1.23.5
2023-05-03 10:23:17,397:INFO:              pandas: 1.5.3
2023-05-03 10:23:17,397:INFO:              jinja2: 3.1.2
2023-05-03 10:23:17,397:INFO:               scipy: 1.10.0
2023-05-03 10:23:17,397:INFO:              joblib: 1.2.0
2023-05-03 10:23:17,397:INFO:             sklearn: 1.2.1
2023-05-03 10:23:17,397:INFO:                pyod: 1.0.9
2023-05-03 10:23:17,397:INFO:            imblearn: 0.10.1
2023-05-03 10:23:17,397:INFO:   category_encoders: 2.6.0
2023-05-03 10:23:17,397:INFO:            lightgbm: 3.3.5
2023-05-03 10:23:17,397:INFO:               numba: 0.56.4
2023-05-03 10:23:17,397:INFO:            requests: 2.28.1
2023-05-03 10:23:17,397:INFO:          matplotlib: 3.7.0
2023-05-03 10:23:17,397:INFO:          scikitplot: 0.3.7
2023-05-03 10:23:17,397:INFO:         yellowbrick: 1.5
2023-05-03 10:23:17,397:INFO:              plotly: 5.9.0
2023-05-03 10:23:17,397:INFO:             kaleido: 0.2.1
2023-05-03 10:23:17,397:INFO:         statsmodels: 0.13.5
2023-05-03 10:23:17,397:INFO:              sktime: 0.18.0
2023-05-03 10:23:17,397:INFO:               tbats: 1.1.3
2023-05-03 10:23:17,397:INFO:            pmdarima: 2.0.3
2023-05-03 10:23:17,398:INFO:              psutil: 5.9.0
2023-05-03 10:23:17,398:INFO:PyCaret optional dependencies:
2023-05-03 10:23:17,398:INFO:                shap: Not installed
2023-05-03 10:23:17,398:INFO:           interpret: Not installed
2023-05-03 10:23:17,398:INFO:                umap: Not installed
2023-05-03 10:23:17,398:INFO:    pandas_profiling: Not installed
2023-05-03 10:23:17,398:INFO:  explainerdashboard: Not installed
2023-05-03 10:23:17,398:INFO:             autoviz: Not installed
2023-05-03 10:23:17,398:INFO:           fairlearn: Not installed
2023-05-03 10:23:17,398:INFO:             xgboost: Not installed
2023-05-03 10:23:17,398:INFO:            catboost: Not installed
2023-05-03 10:23:17,398:INFO:              kmodes: Not installed
2023-05-03 10:23:17,399:INFO:             mlxtend: Not installed
2023-05-03 10:23:17,399:INFO:       statsforecast: Not installed
2023-05-03 10:23:17,399:INFO:        tune_sklearn: Not installed
2023-05-03 10:23:17,399:INFO:                 ray: Not installed
2023-05-03 10:23:17,399:INFO:            hyperopt: Not installed
2023-05-03 10:23:17,400:INFO:              optuna: Not installed
2023-05-03 10:23:17,400:INFO:               skopt: Not installed
2023-05-03 10:23:17,400:INFO:              mlflow: Not installed
2023-05-03 10:23:17,400:INFO:              gradio: Not installed
2023-05-03 10:23:17,400:INFO:             fastapi: Not installed
2023-05-03 10:23:17,400:INFO:             uvicorn: Not installed
2023-05-03 10:23:17,400:INFO:              m2cgen: Not installed
2023-05-03 10:23:17,400:INFO:           evidently: Not installed
2023-05-03 10:23:17,400:INFO:               fugue: Not installed
2023-05-03 10:23:17,400:INFO:           streamlit: Not installed
2023-05-03 10:23:17,400:INFO:             prophet: Not installed
2023-05-03 10:23:17,400:INFO:None
2023-05-03 10:23:17,400:INFO:Set up data.
2023-05-03 10:24:31,503:INFO:PyCaret ClassificationExperiment
2023-05-03 10:24:31,503:INFO:Logging name: clf-default-name
2023-05-03 10:24:31,503:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-05-03 10:24:31,503:INFO:version 3.0.0
2023-05-03 10:24:31,503:INFO:Initializing setup()
2023-05-03 10:24:31,503:INFO:self.USI: 3a5a
2023-05-03 10:24:31,504:INFO:self._variable_keys: {'target_param', 'y_train', 'y', 'is_multiclass', 'USI', 'gpu_n_jobs_param', 'gpu_param', 'fold_groups_param', 'memory', 'idx', 'seed', 'exp_id', '_available_plots', 'fix_imbalance', 'X', 'exp_name_log', '_ml_usecase', 'data', 'logging_param', 'html_param', 'n_jobs_param', 'pipeline', 'log_plots_param', 'X_test', 'X_train', 'y_test', 'fold_generator', 'fold_shuffle_param'}
2023-05-03 10:24:31,504:INFO:Checking environment
2023-05-03 10:24:31,504:INFO:python_version: 3.10.9
2023-05-03 10:24:31,504:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2023-05-03 10:24:31,504:INFO:machine: AMD64
2023-05-03 10:24:31,504:INFO:platform: Windows-10-10.0.22621-SP0
2023-05-03 10:24:31,504:INFO:Memory: svmem(total=16760946688, available=7407431680, percent=55.8, used=9353515008, free=7407431680)
2023-05-03 10:24:31,504:INFO:Physical Core: 4
2023-05-03 10:24:31,504:INFO:Logical Core: 8
2023-05-03 10:24:31,504:INFO:Checking libraries
2023-05-03 10:24:31,504:INFO:System:
2023-05-03 10:24:31,504:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2023-05-03 10:24:31,504:INFO:executable: c:\Users\DELL\anaconda3\python.exe
2023-05-03 10:24:31,504:INFO:   machine: Windows-10-10.0.22621-SP0
2023-05-03 10:24:31,504:INFO:PyCaret required dependencies:
2023-05-03 10:24:31,504:INFO:                 pip: 22.3.1
2023-05-03 10:24:31,504:INFO:          setuptools: 65.6.3
2023-05-03 10:24:31,504:INFO:             pycaret: 3.0.0
2023-05-03 10:24:31,504:INFO:             IPython: 8.10.0
2023-05-03 10:24:31,504:INFO:          ipywidgets: 7.6.5
2023-05-03 10:24:31,504:INFO:                tqdm: 4.64.1
2023-05-03 10:24:31,505:INFO:               numpy: 1.23.5
2023-05-03 10:24:31,505:INFO:              pandas: 1.5.3
2023-05-03 10:24:31,505:INFO:              jinja2: 3.1.2
2023-05-03 10:24:31,505:INFO:               scipy: 1.10.0
2023-05-03 10:24:31,505:INFO:              joblib: 1.2.0
2023-05-03 10:24:31,505:INFO:             sklearn: 1.2.1
2023-05-03 10:24:31,505:INFO:                pyod: 1.0.9
2023-05-03 10:24:31,505:INFO:            imblearn: 0.10.1
2023-05-03 10:24:31,505:INFO:   category_encoders: 2.6.0
2023-05-03 10:24:31,505:INFO:            lightgbm: 3.3.5
2023-05-03 10:24:31,505:INFO:               numba: 0.56.4
2023-05-03 10:24:31,505:INFO:            requests: 2.28.1
2023-05-03 10:24:31,505:INFO:          matplotlib: 3.7.0
2023-05-03 10:24:31,506:INFO:          scikitplot: 0.3.7
2023-05-03 10:24:31,506:INFO:         yellowbrick: 1.5
2023-05-03 10:24:31,506:INFO:              plotly: 5.9.0
2023-05-03 10:24:31,506:INFO:             kaleido: 0.2.1
2023-05-03 10:24:31,506:INFO:         statsmodels: 0.13.5
2023-05-03 10:24:31,506:INFO:              sktime: 0.18.0
2023-05-03 10:24:31,506:INFO:               tbats: 1.1.3
2023-05-03 10:24:31,506:INFO:            pmdarima: 2.0.3
2023-05-03 10:24:31,506:INFO:              psutil: 5.9.0
2023-05-03 10:24:31,506:INFO:PyCaret optional dependencies:
2023-05-03 10:24:31,506:INFO:                shap: Not installed
2023-05-03 10:24:31,506:INFO:           interpret: Not installed
2023-05-03 10:24:31,506:INFO:                umap: Not installed
2023-05-03 10:24:31,506:INFO:    pandas_profiling: Not installed
2023-05-03 10:24:31,506:INFO:  explainerdashboard: Not installed
2023-05-03 10:24:31,506:INFO:             autoviz: Not installed
2023-05-03 10:24:31,506:INFO:           fairlearn: Not installed
2023-05-03 10:24:31,506:INFO:             xgboost: Not installed
2023-05-03 10:24:31,506:INFO:            catboost: Not installed
2023-05-03 10:24:31,506:INFO:              kmodes: Not installed
2023-05-03 10:24:31,506:INFO:             mlxtend: Not installed
2023-05-03 10:24:31,506:INFO:       statsforecast: Not installed
2023-05-03 10:24:31,506:INFO:        tune_sklearn: Not installed
2023-05-03 10:24:31,507:INFO:                 ray: Not installed
2023-05-03 10:24:31,507:INFO:            hyperopt: Not installed
2023-05-03 10:24:31,507:INFO:              optuna: Not installed
2023-05-03 10:24:31,507:INFO:               skopt: Not installed
2023-05-03 10:24:31,507:INFO:              mlflow: Not installed
2023-05-03 10:24:31,507:INFO:              gradio: Not installed
2023-05-03 10:24:31,507:INFO:             fastapi: Not installed
2023-05-03 10:24:31,507:INFO:             uvicorn: Not installed
2023-05-03 10:24:31,507:INFO:              m2cgen: Not installed
2023-05-03 10:24:31,507:INFO:           evidently: Not installed
2023-05-03 10:24:31,507:INFO:               fugue: Not installed
2023-05-03 10:24:31,507:INFO:           streamlit: Not installed
2023-05-03 10:24:31,507:INFO:             prophet: Not installed
2023-05-03 10:24:31,507:INFO:None
2023-05-03 10:24:31,507:INFO:Set up data.
2023-05-03 10:32:01,327:INFO:PyCaret ClassificationExperiment
2023-05-03 10:32:01,327:INFO:Logging name: clf-default-name
2023-05-03 10:32:01,328:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-05-03 10:32:01,328:INFO:version 3.0.0
2023-05-03 10:32:01,328:INFO:Initializing setup()
2023-05-03 10:32:01,328:INFO:self.USI: ca91
2023-05-03 10:32:01,328:INFO:self._variable_keys: {'target_param', 'y_train', 'y', 'is_multiclass', 'USI', 'gpu_n_jobs_param', 'gpu_param', 'fold_groups_param', 'memory', 'idx', 'seed', 'exp_id', '_available_plots', 'fix_imbalance', 'X', 'exp_name_log', '_ml_usecase', 'data', 'logging_param', 'html_param', 'n_jobs_param', 'pipeline', 'log_plots_param', 'X_test', 'X_train', 'y_test', 'fold_generator', 'fold_shuffle_param'}
2023-05-03 10:32:01,328:INFO:Checking environment
2023-05-03 10:32:01,328:INFO:python_version: 3.10.9
2023-05-03 10:32:01,328:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2023-05-03 10:32:01,328:INFO:machine: AMD64
2023-05-03 10:32:01,328:INFO:platform: Windows-10-10.0.22621-SP0
2023-05-03 10:32:01,328:INFO:Memory: svmem(total=16760946688, available=6890487808, percent=58.9, used=9870458880, free=6890487808)
2023-05-03 10:32:01,328:INFO:Physical Core: 4
2023-05-03 10:32:01,328:INFO:Logical Core: 8
2023-05-03 10:32:01,328:INFO:Checking libraries
2023-05-03 10:32:01,328:INFO:System:
2023-05-03 10:32:01,328:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2023-05-03 10:32:01,328:INFO:executable: c:\Users\DELL\anaconda3\python.exe
2023-05-03 10:32:01,328:INFO:   machine: Windows-10-10.0.22621-SP0
2023-05-03 10:32:01,328:INFO:PyCaret required dependencies:
2023-05-03 10:32:01,328:INFO:                 pip: 22.3.1
2023-05-03 10:32:01,329:INFO:          setuptools: 65.6.3
2023-05-03 10:32:01,329:INFO:             pycaret: 3.0.0
2023-05-03 10:32:01,329:INFO:             IPython: 8.10.0
2023-05-03 10:32:01,329:INFO:          ipywidgets: 7.6.5
2023-05-03 10:32:01,329:INFO:                tqdm: 4.64.1
2023-05-03 10:32:01,329:INFO:               numpy: 1.23.5
2023-05-03 10:32:01,329:INFO:              pandas: 1.5.3
2023-05-03 10:32:01,329:INFO:              jinja2: 3.1.2
2023-05-03 10:32:01,329:INFO:               scipy: 1.10.0
2023-05-03 10:32:01,329:INFO:              joblib: 1.2.0
2023-05-03 10:32:01,329:INFO:             sklearn: 1.2.1
2023-05-03 10:32:01,329:INFO:                pyod: 1.0.9
2023-05-03 10:32:01,329:INFO:            imblearn: 0.10.1
2023-05-03 10:32:01,330:INFO:   category_encoders: 2.6.0
2023-05-03 10:32:01,330:INFO:            lightgbm: 3.3.5
2023-05-03 10:32:01,330:INFO:               numba: 0.56.4
2023-05-03 10:32:01,330:INFO:            requests: 2.28.1
2023-05-03 10:32:01,330:INFO:          matplotlib: 3.7.0
2023-05-03 10:32:01,330:INFO:          scikitplot: 0.3.7
2023-05-03 10:32:01,330:INFO:         yellowbrick: 1.5
2023-05-03 10:32:01,330:INFO:              plotly: 5.9.0
2023-05-03 10:32:01,330:INFO:             kaleido: 0.2.1
2023-05-03 10:32:01,330:INFO:         statsmodels: 0.13.5
2023-05-03 10:32:01,330:INFO:              sktime: 0.18.0
2023-05-03 10:32:01,330:INFO:               tbats: 1.1.3
2023-05-03 10:32:01,330:INFO:            pmdarima: 2.0.3
2023-05-03 10:32:01,330:INFO:              psutil: 5.9.0
2023-05-03 10:32:01,330:INFO:PyCaret optional dependencies:
2023-05-03 10:32:01,330:INFO:                shap: Not installed
2023-05-03 10:32:01,330:INFO:           interpret: Not installed
2023-05-03 10:32:01,330:INFO:                umap: Not installed
2023-05-03 10:32:01,330:INFO:    pandas_profiling: Not installed
2023-05-03 10:32:01,330:INFO:  explainerdashboard: Not installed
2023-05-03 10:32:01,330:INFO:             autoviz: Not installed
2023-05-03 10:32:01,330:INFO:           fairlearn: Not installed
2023-05-03 10:32:01,331:INFO:             xgboost: Not installed
2023-05-03 10:32:01,331:INFO:            catboost: Not installed
2023-05-03 10:32:01,331:INFO:              kmodes: Not installed
2023-05-03 10:32:01,331:INFO:             mlxtend: Not installed
2023-05-03 10:32:01,331:INFO:       statsforecast: Not installed
2023-05-03 10:32:01,331:INFO:        tune_sklearn: Not installed
2023-05-03 10:32:01,331:INFO:                 ray: Not installed
2023-05-03 10:32:01,331:INFO:            hyperopt: Not installed
2023-05-03 10:32:01,331:INFO:              optuna: Not installed
2023-05-03 10:32:01,331:INFO:               skopt: Not installed
2023-05-03 10:32:01,331:INFO:              mlflow: Not installed
2023-05-03 10:32:01,331:INFO:              gradio: Not installed
2023-05-03 10:32:01,331:INFO:             fastapi: Not installed
2023-05-03 10:32:01,331:INFO:             uvicorn: Not installed
2023-05-03 10:32:01,331:INFO:              m2cgen: Not installed
2023-05-03 10:32:01,331:INFO:           evidently: Not installed
2023-05-03 10:32:01,331:INFO:               fugue: Not installed
2023-05-03 10:32:01,331:INFO:           streamlit: Not installed
2023-05-03 10:32:01,331:INFO:             prophet: Not installed
2023-05-03 10:32:01,331:INFO:None
2023-05-03 10:32:01,331:INFO:Set up data.
2023-05-03 10:32:01,454:INFO:Set up train/test split.
2023-05-03 10:34:33,504:INFO:PyCaret ClassificationExperiment
2023-05-03 10:34:33,504:INFO:Logging name: clf-default-name
2023-05-03 10:34:33,504:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-05-03 10:34:33,504:INFO:version 3.0.0
2023-05-03 10:34:33,504:INFO:Initializing setup()
2023-05-03 10:34:33,504:INFO:self.USI: 316c
2023-05-03 10:34:33,504:INFO:self._variable_keys: {'target_param', 'y_train', 'y', 'is_multiclass', 'USI', 'gpu_n_jobs_param', 'gpu_param', 'fold_groups_param', 'memory', 'idx', 'seed', 'exp_id', '_available_plots', 'fix_imbalance', 'X', 'exp_name_log', '_ml_usecase', 'data', 'logging_param', 'html_param', 'n_jobs_param', 'pipeline', 'log_plots_param', 'X_test', 'X_train', 'y_test', 'fold_generator', 'fold_shuffle_param'}
2023-05-03 10:34:33,504:INFO:Checking environment
2023-05-03 10:34:33,504:INFO:python_version: 3.10.9
2023-05-03 10:34:33,504:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2023-05-03 10:34:33,504:INFO:machine: AMD64
2023-05-03 10:34:33,504:INFO:platform: Windows-10-10.0.22621-SP0
2023-05-03 10:34:33,504:INFO:Memory: svmem(total=16760946688, available=6901719040, percent=58.8, used=9859227648, free=6901719040)
2023-05-03 10:34:33,504:INFO:Physical Core: 4
2023-05-03 10:34:33,504:INFO:Logical Core: 8
2023-05-03 10:34:33,504:INFO:Checking libraries
2023-05-03 10:34:33,504:INFO:System:
2023-05-03 10:34:33,504:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2023-05-03 10:34:33,505:INFO:executable: c:\Users\DELL\anaconda3\python.exe
2023-05-03 10:34:33,505:INFO:   machine: Windows-10-10.0.22621-SP0
2023-05-03 10:34:33,505:INFO:PyCaret required dependencies:
2023-05-03 10:34:33,505:INFO:                 pip: 22.3.1
2023-05-03 10:34:33,505:INFO:          setuptools: 65.6.3
2023-05-03 10:34:33,505:INFO:             pycaret: 3.0.0
2023-05-03 10:34:33,505:INFO:             IPython: 8.10.0
2023-05-03 10:34:33,505:INFO:          ipywidgets: 7.6.5
2023-05-03 10:34:33,505:INFO:                tqdm: 4.64.1
2023-05-03 10:34:33,505:INFO:               numpy: 1.23.5
2023-05-03 10:34:33,505:INFO:              pandas: 1.5.3
2023-05-03 10:34:33,505:INFO:              jinja2: 3.1.2
2023-05-03 10:34:33,505:INFO:               scipy: 1.10.0
2023-05-03 10:34:33,505:INFO:              joblib: 1.2.0
2023-05-03 10:34:33,505:INFO:             sklearn: 1.2.1
2023-05-03 10:34:33,505:INFO:                pyod: 1.0.9
2023-05-03 10:34:33,505:INFO:            imblearn: 0.10.1
2023-05-03 10:34:33,506:INFO:   category_encoders: 2.6.0
2023-05-03 10:34:33,506:INFO:            lightgbm: 3.3.5
2023-05-03 10:34:33,506:INFO:               numba: 0.56.4
2023-05-03 10:34:33,506:INFO:            requests: 2.28.1
2023-05-03 10:34:33,506:INFO:          matplotlib: 3.7.0
2023-05-03 10:34:33,506:INFO:          scikitplot: 0.3.7
2023-05-03 10:34:33,506:INFO:         yellowbrick: 1.5
2023-05-03 10:34:33,506:INFO:              plotly: 5.9.0
2023-05-03 10:34:33,506:INFO:             kaleido: 0.2.1
2023-05-03 10:34:33,506:INFO:         statsmodels: 0.13.5
2023-05-03 10:34:33,506:INFO:              sktime: 0.18.0
2023-05-03 10:34:33,506:INFO:               tbats: 1.1.3
2023-05-03 10:34:33,506:INFO:            pmdarima: 2.0.3
2023-05-03 10:34:33,506:INFO:              psutil: 5.9.0
2023-05-03 10:34:33,506:INFO:PyCaret optional dependencies:
2023-05-03 10:34:33,506:INFO:                shap: Not installed
2023-05-03 10:34:33,506:INFO:           interpret: Not installed
2023-05-03 10:34:33,506:INFO:                umap: Not installed
2023-05-03 10:34:33,506:INFO:    pandas_profiling: Not installed
2023-05-03 10:34:33,507:INFO:  explainerdashboard: Not installed
2023-05-03 10:34:33,507:INFO:             autoviz: Not installed
2023-05-03 10:34:33,507:INFO:           fairlearn: Not installed
2023-05-03 10:34:33,507:INFO:             xgboost: Not installed
2023-05-03 10:34:33,507:INFO:            catboost: Not installed
2023-05-03 10:34:33,507:INFO:              kmodes: Not installed
2023-05-03 10:34:33,507:INFO:             mlxtend: Not installed
2023-05-03 10:34:33,507:INFO:       statsforecast: Not installed
2023-05-03 10:34:33,507:INFO:        tune_sklearn: Not installed
2023-05-03 10:34:33,507:INFO:                 ray: Not installed
2023-05-03 10:34:33,507:INFO:            hyperopt: Not installed
2023-05-03 10:34:33,507:INFO:              optuna: Not installed
2023-05-03 10:34:33,507:INFO:               skopt: Not installed
2023-05-03 10:34:33,507:INFO:              mlflow: Not installed
2023-05-03 10:34:33,507:INFO:              gradio: Not installed
2023-05-03 10:34:33,507:INFO:             fastapi: Not installed
2023-05-03 10:34:33,507:INFO:             uvicorn: Not installed
2023-05-03 10:34:33,507:INFO:              m2cgen: Not installed
2023-05-03 10:34:33,507:INFO:           evidently: Not installed
2023-05-03 10:34:33,507:INFO:               fugue: Not installed
2023-05-03 10:34:33,507:INFO:           streamlit: Not installed
2023-05-03 10:34:33,507:INFO:             prophet: Not installed
2023-05-03 10:34:33,507:INFO:None
2023-05-03 10:34:33,508:INFO:Set up data.
2023-05-03 10:34:33,642:INFO:Set up train/test split.
2023-05-03 10:34:36,698:INFO:PyCaret ClassificationExperiment
2023-05-03 10:34:36,698:INFO:Logging name: clf-default-name
2023-05-03 10:34:36,698:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-05-03 10:34:36,698:INFO:version 3.0.0
2023-05-03 10:34:36,698:INFO:Initializing setup()
2023-05-03 10:34:36,698:INFO:self.USI: 9419
2023-05-03 10:34:36,698:INFO:self._variable_keys: {'target_param', 'y_train', 'y', 'is_multiclass', 'USI', 'gpu_n_jobs_param', 'gpu_param', 'fold_groups_param', 'memory', 'idx', 'seed', 'exp_id', '_available_plots', 'fix_imbalance', 'X', 'exp_name_log', '_ml_usecase', 'data', 'logging_param', 'html_param', 'n_jobs_param', 'pipeline', 'log_plots_param', 'X_test', 'X_train', 'y_test', 'fold_generator', 'fold_shuffle_param'}
2023-05-03 10:34:36,699:INFO:Checking environment
2023-05-03 10:34:36,699:INFO:python_version: 3.10.9
2023-05-03 10:34:36,699:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2023-05-03 10:34:36,699:INFO:machine: AMD64
2023-05-03 10:34:36,699:INFO:platform: Windows-10-10.0.22621-SP0
2023-05-03 10:34:36,699:INFO:Memory: svmem(total=16760946688, available=6871105536, percent=59.0, used=9889841152, free=6871105536)
2023-05-03 10:34:36,699:INFO:Physical Core: 4
2023-05-03 10:34:36,699:INFO:Logical Core: 8
2023-05-03 10:34:36,699:INFO:Checking libraries
2023-05-03 10:34:36,699:INFO:System:
2023-05-03 10:34:36,699:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2023-05-03 10:34:36,699:INFO:executable: c:\Users\DELL\anaconda3\python.exe
2023-05-03 10:34:36,699:INFO:   machine: Windows-10-10.0.22621-SP0
2023-05-03 10:34:36,699:INFO:PyCaret required dependencies:
2023-05-03 10:34:36,699:INFO:                 pip: 22.3.1
2023-05-03 10:34:36,699:INFO:          setuptools: 65.6.3
2023-05-03 10:34:36,699:INFO:             pycaret: 3.0.0
2023-05-03 10:34:36,699:INFO:             IPython: 8.10.0
2023-05-03 10:34:36,699:INFO:          ipywidgets: 7.6.5
2023-05-03 10:34:36,699:INFO:                tqdm: 4.64.1
2023-05-03 10:34:36,700:INFO:               numpy: 1.23.5
2023-05-03 10:34:36,700:INFO:              pandas: 1.5.3
2023-05-03 10:34:36,700:INFO:              jinja2: 3.1.2
2023-05-03 10:34:36,700:INFO:               scipy: 1.10.0
2023-05-03 10:34:36,700:INFO:              joblib: 1.2.0
2023-05-03 10:34:36,700:INFO:             sklearn: 1.2.1
2023-05-03 10:34:36,700:INFO:                pyod: 1.0.9
2023-05-03 10:34:36,700:INFO:            imblearn: 0.10.1
2023-05-03 10:34:36,700:INFO:   category_encoders: 2.6.0
2023-05-03 10:34:36,700:INFO:            lightgbm: 3.3.5
2023-05-03 10:34:36,700:INFO:               numba: 0.56.4
2023-05-03 10:34:36,700:INFO:            requests: 2.28.1
2023-05-03 10:34:36,700:INFO:          matplotlib: 3.7.0
2023-05-03 10:34:36,700:INFO:          scikitplot: 0.3.7
2023-05-03 10:34:36,700:INFO:         yellowbrick: 1.5
2023-05-03 10:34:36,701:INFO:              plotly: 5.9.0
2023-05-03 10:34:36,701:INFO:             kaleido: 0.2.1
2023-05-03 10:34:36,701:INFO:         statsmodels: 0.13.5
2023-05-03 10:34:36,701:INFO:              sktime: 0.18.0
2023-05-03 10:34:36,701:INFO:               tbats: 1.1.3
2023-05-03 10:34:36,701:INFO:            pmdarima: 2.0.3
2023-05-03 10:34:36,701:INFO:              psutil: 5.9.0
2023-05-03 10:34:36,701:INFO:PyCaret optional dependencies:
2023-05-03 10:34:36,701:INFO:                shap: Not installed
2023-05-03 10:34:36,701:INFO:           interpret: Not installed
2023-05-03 10:34:36,702:INFO:                umap: Not installed
2023-05-03 10:34:36,702:INFO:    pandas_profiling: Not installed
2023-05-03 10:34:36,702:INFO:  explainerdashboard: Not installed
2023-05-03 10:34:36,702:INFO:             autoviz: Not installed
2023-05-03 10:34:36,702:INFO:           fairlearn: Not installed
2023-05-03 10:34:36,702:INFO:             xgboost: Not installed
2023-05-03 10:34:36,702:INFO:            catboost: Not installed
2023-05-03 10:34:36,702:INFO:              kmodes: Not installed
2023-05-03 10:34:36,702:INFO:             mlxtend: Not installed
2023-05-03 10:34:36,702:INFO:       statsforecast: Not installed
2023-05-03 10:34:36,703:INFO:        tune_sklearn: Not installed
2023-05-03 10:34:36,703:INFO:                 ray: Not installed
2023-05-03 10:34:36,703:INFO:            hyperopt: Not installed
2023-05-03 10:34:36,703:INFO:              optuna: Not installed
2023-05-03 10:34:36,703:INFO:               skopt: Not installed
2023-05-03 10:34:36,703:INFO:              mlflow: Not installed
2023-05-03 10:34:36,703:INFO:              gradio: Not installed
2023-05-03 10:34:36,703:INFO:             fastapi: Not installed
2023-05-03 10:34:36,703:INFO:             uvicorn: Not installed
2023-05-03 10:34:36,703:INFO:              m2cgen: Not installed
2023-05-03 10:34:36,704:INFO:           evidently: Not installed
2023-05-03 10:34:36,704:INFO:               fugue: Not installed
2023-05-03 10:34:36,704:INFO:           streamlit: Not installed
2023-05-03 10:34:36,704:INFO:             prophet: Not installed
2023-05-03 10:34:36,704:INFO:None
2023-05-03 10:34:36,704:INFO:Set up data.
2023-05-03 10:34:36,826:INFO:Set up train/test split.
2023-05-03 10:40:42,461:INFO:PyCaret ClassificationExperiment
2023-05-03 10:40:42,461:INFO:Logging name: clf-default-name
2023-05-03 10:40:42,461:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-05-03 10:40:42,461:INFO:version 3.0.0
2023-05-03 10:40:42,461:INFO:Initializing setup()
2023-05-03 10:40:42,461:INFO:self.USI: c4b1
2023-05-03 10:40:42,461:INFO:self._variable_keys: {'target_param', 'y_train', 'y', 'is_multiclass', 'USI', 'gpu_n_jobs_param', 'gpu_param', 'fold_groups_param', 'memory', 'idx', 'seed', 'exp_id', '_available_plots', 'fix_imbalance', 'X', 'exp_name_log', '_ml_usecase', 'data', 'logging_param', 'html_param', 'n_jobs_param', 'pipeline', 'log_plots_param', 'X_test', 'X_train', 'y_test', 'fold_generator', 'fold_shuffle_param'}
2023-05-03 10:40:42,461:INFO:Checking environment
2023-05-03 10:40:42,461:INFO:python_version: 3.10.9
2023-05-03 10:40:42,461:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2023-05-03 10:40:42,461:INFO:machine: AMD64
2023-05-03 10:40:42,461:INFO:platform: Windows-10-10.0.22621-SP0
2023-05-03 10:40:42,461:INFO:Memory: svmem(total=16760946688, available=7278907392, percent=56.6, used=9482039296, free=7278907392)
2023-05-03 10:40:42,461:INFO:Physical Core: 4
2023-05-03 10:40:42,461:INFO:Logical Core: 8
2023-05-03 10:40:42,461:INFO:Checking libraries
2023-05-03 10:40:42,461:INFO:System:
2023-05-03 10:40:42,461:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2023-05-03 10:40:42,461:INFO:executable: c:\Users\DELL\anaconda3\python.exe
2023-05-03 10:40:42,469:INFO:   machine: Windows-10-10.0.22621-SP0
2023-05-03 10:40:42,469:INFO:PyCaret required dependencies:
2023-05-03 10:40:42,469:INFO:                 pip: 22.3.1
2023-05-03 10:40:42,469:INFO:          setuptools: 65.6.3
2023-05-03 10:40:42,469:INFO:             pycaret: 3.0.0
2023-05-03 10:40:42,469:INFO:             IPython: 8.10.0
2023-05-03 10:40:42,469:INFO:          ipywidgets: 7.6.5
2023-05-03 10:40:42,469:INFO:                tqdm: 4.64.1
2023-05-03 10:40:42,469:INFO:               numpy: 1.23.5
2023-05-03 10:40:42,469:INFO:              pandas: 1.5.3
2023-05-03 10:40:42,470:INFO:              jinja2: 3.1.2
2023-05-03 10:40:42,470:INFO:               scipy: 1.10.0
2023-05-03 10:40:42,470:INFO:              joblib: 1.2.0
2023-05-03 10:40:42,470:INFO:             sklearn: 1.2.1
2023-05-03 10:40:42,470:INFO:                pyod: 1.0.9
2023-05-03 10:40:42,470:INFO:            imblearn: 0.10.1
2023-05-03 10:40:42,470:INFO:   category_encoders: 2.6.0
2023-05-03 10:40:42,470:INFO:            lightgbm: 3.3.5
2023-05-03 10:40:42,470:INFO:               numba: 0.56.4
2023-05-03 10:40:42,470:INFO:            requests: 2.28.1
2023-05-03 10:40:42,470:INFO:          matplotlib: 3.7.0
2023-05-03 10:40:42,470:INFO:          scikitplot: 0.3.7
2023-05-03 10:40:42,471:INFO:         yellowbrick: 1.5
2023-05-03 10:40:42,471:INFO:              plotly: 5.9.0
2023-05-03 10:40:42,471:INFO:             kaleido: 0.2.1
2023-05-03 10:40:42,471:INFO:         statsmodels: 0.13.5
2023-05-03 10:40:42,472:INFO:              sktime: 0.18.0
2023-05-03 10:40:42,472:INFO:               tbats: 1.1.3
2023-05-03 10:40:42,472:INFO:            pmdarima: 2.0.3
2023-05-03 10:40:42,472:INFO:              psutil: 5.9.0
2023-05-03 10:40:42,472:INFO:PyCaret optional dependencies:
2023-05-03 10:40:42,472:INFO:                shap: Not installed
2023-05-03 10:40:42,472:INFO:           interpret: Not installed
2023-05-03 10:40:42,472:INFO:                umap: Not installed
2023-05-03 10:40:42,472:INFO:    pandas_profiling: Not installed
2023-05-03 10:40:42,472:INFO:  explainerdashboard: Not installed
2023-05-03 10:40:42,472:INFO:             autoviz: Not installed
2023-05-03 10:40:42,472:INFO:           fairlearn: Not installed
2023-05-03 10:40:42,472:INFO:             xgboost: Not installed
2023-05-03 10:40:42,472:INFO:            catboost: Not installed
2023-05-03 10:40:42,472:INFO:              kmodes: Not installed
2023-05-03 10:40:42,472:INFO:             mlxtend: Not installed
2023-05-03 10:40:42,472:INFO:       statsforecast: Not installed
2023-05-03 10:40:42,472:INFO:        tune_sklearn: Not installed
2023-05-03 10:40:42,472:INFO:                 ray: Not installed
2023-05-03 10:40:42,472:INFO:            hyperopt: Not installed
2023-05-03 10:40:42,472:INFO:              optuna: Not installed
2023-05-03 10:40:42,472:INFO:               skopt: Not installed
2023-05-03 10:40:42,472:INFO:              mlflow: Not installed
2023-05-03 10:40:42,472:INFO:              gradio: Not installed
2023-05-03 10:40:42,472:INFO:             fastapi: Not installed
2023-05-03 10:40:42,472:INFO:             uvicorn: Not installed
2023-05-03 10:40:42,472:INFO:              m2cgen: Not installed
2023-05-03 10:40:42,472:INFO:           evidently: Not installed
2023-05-03 10:40:42,472:INFO:               fugue: Not installed
2023-05-03 10:40:42,472:INFO:           streamlit: Not installed
2023-05-03 10:40:42,472:INFO:             prophet: Not installed
2023-05-03 10:40:42,472:INFO:None
2023-05-03 10:40:42,472:INFO:Set up data.
2023-05-03 10:40:42,624:INFO:Set up train/test split.
2023-05-05 09:53:34,153:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-05 09:53:34,153:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-05 09:53:34,153:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-05 09:53:34,153:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-05 09:53:36,037:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-05-05 09:53:38,178:INFO:PyCaret ClassificationExperiment
2023-05-05 09:53:38,178:INFO:Logging name: clf-default-name
2023-05-05 09:53:38,178:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-05-05 09:53:38,178:INFO:version 3.0.0
2023-05-05 09:53:38,179:INFO:Initializing setup()
2023-05-05 09:53:38,179:INFO:self.USI: 59a0
2023-05-05 09:53:38,179:INFO:self._variable_keys: {'fix_imbalance', 'fold_shuffle_param', 'fold_generator', 'exp_name_log', '_available_plots', 'exp_id', 'X_test', 'gpu_param', 'data', 'X_train', 'logging_param', 'html_param', 'log_plots_param', 'target_param', 'pipeline', 'idx', 'seed', 'is_multiclass', 'y_test', 'gpu_n_jobs_param', 'fold_groups_param', 'y', '_ml_usecase', 'n_jobs_param', 'X', 'y_train', 'USI', 'memory'}
2023-05-05 09:53:38,179:INFO:Checking environment
2023-05-05 09:53:38,179:INFO:python_version: 3.10.9
2023-05-05 09:53:38,179:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2023-05-05 09:53:38,179:INFO:machine: AMD64
2023-05-05 09:53:38,179:INFO:platform: Windows-10-10.0.22621-SP0
2023-05-05 09:53:38,179:INFO:Memory: svmem(total=16760946688, available=7020077056, percent=58.1, used=9740869632, free=7020077056)
2023-05-05 09:53:38,179:INFO:Physical Core: 4
2023-05-05 09:53:38,179:INFO:Logical Core: 8
2023-05-05 09:53:38,179:INFO:Checking libraries
2023-05-05 09:53:38,179:INFO:System:
2023-05-05 09:53:38,179:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2023-05-05 09:53:38,179:INFO:executable: c:\Users\DELL\anaconda3\python.exe
2023-05-05 09:53:38,179:INFO:   machine: Windows-10-10.0.22621-SP0
2023-05-05 09:53:38,179:INFO:PyCaret required dependencies:
2023-05-05 09:53:38,179:INFO:                 pip: 22.3.1
2023-05-05 09:53:38,180:INFO:          setuptools: 65.6.3
2023-05-05 09:53:38,180:INFO:             pycaret: 3.0.0
2023-05-05 09:53:38,180:INFO:             IPython: 8.10.0
2023-05-05 09:53:38,180:INFO:          ipywidgets: 7.6.5
2023-05-05 09:53:38,180:INFO:                tqdm: 4.64.1
2023-05-05 09:53:38,180:INFO:               numpy: 1.23.5
2023-05-05 09:53:38,181:INFO:              pandas: 1.5.3
2023-05-05 09:53:38,181:INFO:              jinja2: 3.1.2
2023-05-05 09:53:38,181:INFO:               scipy: 1.10.0
2023-05-05 09:53:38,181:INFO:              joblib: 1.2.0
2023-05-05 09:53:38,181:INFO:             sklearn: 1.2.1
2023-05-05 09:53:38,181:INFO:                pyod: 1.0.9
2023-05-05 09:53:38,181:INFO:            imblearn: 0.10.1
2023-05-05 09:53:38,181:INFO:   category_encoders: 2.6.0
2023-05-05 09:53:38,181:INFO:            lightgbm: 3.3.5
2023-05-05 09:53:38,181:INFO:               numba: 0.56.4
2023-05-05 09:53:38,181:INFO:            requests: 2.28.1
2023-05-05 09:53:38,181:INFO:          matplotlib: 3.7.0
2023-05-05 09:53:38,181:INFO:          scikitplot: 0.3.7
2023-05-05 09:53:38,181:INFO:         yellowbrick: 1.5
2023-05-05 09:53:38,181:INFO:              plotly: 5.9.0
2023-05-05 09:53:38,181:INFO:             kaleido: 0.2.1
2023-05-05 09:53:38,181:INFO:         statsmodels: 0.13.5
2023-05-05 09:53:38,181:INFO:              sktime: 0.18.0
2023-05-05 09:53:38,181:INFO:               tbats: 1.1.3
2023-05-05 09:53:38,181:INFO:            pmdarima: 2.0.3
2023-05-05 09:53:38,181:INFO:              psutil: 5.9.0
2023-05-05 09:53:38,181:INFO:PyCaret optional dependencies:
2023-05-05 09:53:38,732:INFO:                shap: Not installed
2023-05-05 09:53:38,732:INFO:           interpret: Not installed
2023-05-05 09:53:38,732:INFO:                umap: Not installed
2023-05-05 09:53:38,732:INFO:    pandas_profiling: Not installed
2023-05-05 09:53:38,733:INFO:  explainerdashboard: Not installed
2023-05-05 09:53:38,733:INFO:             autoviz: Not installed
2023-05-05 09:53:38,733:INFO:           fairlearn: Not installed
2023-05-05 09:53:38,733:INFO:             xgboost: Not installed
2023-05-05 09:53:38,733:INFO:            catboost: Not installed
2023-05-05 09:53:38,733:INFO:              kmodes: Not installed
2023-05-05 09:53:38,733:INFO:             mlxtend: Not installed
2023-05-05 09:53:38,733:INFO:       statsforecast: Not installed
2023-05-05 09:53:38,733:INFO:        tune_sklearn: Not installed
2023-05-05 09:53:38,733:INFO:                 ray: Not installed
2023-05-05 09:53:38,733:INFO:            hyperopt: Not installed
2023-05-05 09:53:38,733:INFO:              optuna: Not installed
2023-05-05 09:53:38,733:INFO:               skopt: Not installed
2023-05-05 09:53:38,733:INFO:              mlflow: Not installed
2023-05-05 09:53:38,733:INFO:              gradio: Not installed
2023-05-05 09:53:38,733:INFO:             fastapi: 0.95.1
2023-05-05 09:53:38,733:INFO:             uvicorn: 0.22.0
2023-05-05 09:53:38,733:INFO:              m2cgen: Not installed
2023-05-05 09:53:38,733:INFO:           evidently: Not installed
2023-05-05 09:53:38,733:INFO:               fugue: Not installed
2023-05-05 09:53:38,733:INFO:           streamlit: Not installed
2023-05-05 09:53:38,734:INFO:             prophet: Not installed
2023-05-05 09:53:38,734:INFO:None
2023-05-05 09:53:38,734:INFO:Set up data.
2023-05-05 09:53:38,967:INFO:Set up train/test split.
2023-05-05 09:53:39,074:INFO:Set up index.
2023-05-05 09:53:39,074:INFO:Set up folding strategy.
2023-05-05 09:53:39,074:INFO:Assigning column types.
2023-05-05 09:53:39,081:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-05-05 09:53:39,133:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-05-05 09:53:39,137:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-05 09:53:39,189:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 09:53:39,827:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 09:53:39,880:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-05-05 09:53:39,881:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-05 09:53:39,910:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 09:53:39,910:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 09:53:39,911:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-05-05 09:53:39,963:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-05 09:53:39,997:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 09:53:39,998:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 09:53:40,050:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-05 09:53:40,080:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 09:53:40,080:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 09:53:40,081:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-05-05 09:53:40,161:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 09:53:40,161:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 09:53:40,244:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 09:53:40,244:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 09:53:40,246:INFO:Preparing preprocessing pipeline...
2023-05-05 09:53:40,250:INFO:Set up label encoding.
2023-05-05 09:53:40,250:INFO:Set up simple imputation.
2023-05-05 09:53:40,323:INFO:Set up encoding of ordinal features.
2023-05-05 09:53:40,326:INFO:Set up encoding of categorical features.
2023-05-05 09:59:07,688:INFO:PyCaret ClassificationExperiment
2023-05-05 09:59:07,688:INFO:Logging name: clf-default-name
2023-05-05 09:59:07,688:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-05-05 09:59:07,688:INFO:version 3.0.0
2023-05-05 09:59:07,688:INFO:Initializing setup()
2023-05-05 09:59:07,688:INFO:self.USI: 5686
2023-05-05 09:59:07,688:INFO:self._variable_keys: {'fix_imbalance', 'fold_shuffle_param', 'fold_generator', 'exp_name_log', '_available_plots', 'exp_id', 'X_test', 'gpu_param', 'data', 'X_train', 'logging_param', 'html_param', 'log_plots_param', 'target_param', 'pipeline', 'idx', 'seed', 'is_multiclass', 'y_test', 'gpu_n_jobs_param', 'fold_groups_param', 'y', '_ml_usecase', 'n_jobs_param', 'X', 'y_train', 'USI', 'memory'}
2023-05-05 09:59:07,688:INFO:Checking environment
2023-05-05 09:59:07,688:INFO:python_version: 3.10.9
2023-05-05 09:59:07,688:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2023-05-05 09:59:07,689:INFO:machine: AMD64
2023-05-05 09:59:07,689:INFO:platform: Windows-10-10.0.22621-SP0
2023-05-05 09:59:07,689:INFO:Memory: svmem(total=16760946688, available=6139670528, percent=63.4, used=10621276160, free=6139670528)
2023-05-05 09:59:07,689:INFO:Physical Core: 4
2023-05-05 09:59:07,689:INFO:Logical Core: 8
2023-05-05 09:59:07,689:INFO:Checking libraries
2023-05-05 09:59:07,689:INFO:System:
2023-05-05 09:59:07,689:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2023-05-05 09:59:07,689:INFO:executable: c:\Users\DELL\anaconda3\python.exe
2023-05-05 09:59:07,689:INFO:   machine: Windows-10-10.0.22621-SP0
2023-05-05 09:59:07,689:INFO:PyCaret required dependencies:
2023-05-05 09:59:07,689:INFO:                 pip: 22.3.1
2023-05-05 09:59:07,689:INFO:          setuptools: 65.6.3
2023-05-05 09:59:07,689:INFO:             pycaret: 3.0.0
2023-05-05 09:59:07,689:INFO:             IPython: 8.10.0
2023-05-05 09:59:07,689:INFO:          ipywidgets: 7.6.5
2023-05-05 09:59:07,689:INFO:                tqdm: 4.64.1
2023-05-05 09:59:07,689:INFO:               numpy: 1.23.5
2023-05-05 09:59:07,689:INFO:              pandas: 1.5.3
2023-05-05 09:59:07,689:INFO:              jinja2: 3.1.2
2023-05-05 09:59:07,690:INFO:               scipy: 1.10.0
2023-05-05 09:59:07,690:INFO:              joblib: 1.2.0
2023-05-05 09:59:07,690:INFO:             sklearn: 1.2.1
2023-05-05 09:59:07,690:INFO:                pyod: 1.0.9
2023-05-05 09:59:07,690:INFO:            imblearn: 0.10.1
2023-05-05 09:59:07,690:INFO:   category_encoders: 2.6.0
2023-05-05 09:59:07,690:INFO:            lightgbm: 3.3.5
2023-05-05 09:59:07,690:INFO:               numba: 0.56.4
2023-05-05 09:59:07,690:INFO:            requests: 2.28.1
2023-05-05 09:59:07,690:INFO:          matplotlib: 3.7.0
2023-05-05 09:59:07,690:INFO:          scikitplot: 0.3.7
2023-05-05 09:59:07,690:INFO:         yellowbrick: 1.5
2023-05-05 09:59:07,690:INFO:              plotly: 5.9.0
2023-05-05 09:59:07,690:INFO:             kaleido: 0.2.1
2023-05-05 09:59:07,690:INFO:         statsmodels: 0.13.5
2023-05-05 09:59:07,690:INFO:              sktime: 0.18.0
2023-05-05 09:59:07,690:INFO:               tbats: 1.1.3
2023-05-05 09:59:07,690:INFO:            pmdarima: 2.0.3
2023-05-05 09:59:07,690:INFO:              psutil: 5.9.0
2023-05-05 09:59:07,690:INFO:PyCaret optional dependencies:
2023-05-05 09:59:07,690:INFO:                shap: Not installed
2023-05-05 09:59:07,690:INFO:           interpret: Not installed
2023-05-05 09:59:07,691:INFO:                umap: Not installed
2023-05-05 09:59:07,691:INFO:    pandas_profiling: Not installed
2023-05-05 09:59:07,691:INFO:  explainerdashboard: Not installed
2023-05-05 09:59:07,691:INFO:             autoviz: Not installed
2023-05-05 09:59:07,691:INFO:           fairlearn: Not installed
2023-05-05 09:59:07,691:INFO:             xgboost: Not installed
2023-05-05 09:59:07,691:INFO:            catboost: Not installed
2023-05-05 09:59:07,691:INFO:              kmodes: Not installed
2023-05-05 09:59:07,691:INFO:             mlxtend: Not installed
2023-05-05 09:59:07,691:INFO:       statsforecast: Not installed
2023-05-05 09:59:07,691:INFO:        tune_sklearn: Not installed
2023-05-05 09:59:07,691:INFO:                 ray: Not installed
2023-05-05 09:59:07,691:INFO:            hyperopt: Not installed
2023-05-05 09:59:07,691:INFO:              optuna: Not installed
2023-05-05 09:59:07,691:INFO:               skopt: Not installed
2023-05-05 09:59:07,691:INFO:              mlflow: Not installed
2023-05-05 09:59:07,691:INFO:              gradio: Not installed
2023-05-05 09:59:07,691:INFO:             fastapi: 0.95.1
2023-05-05 09:59:07,691:INFO:             uvicorn: 0.22.0
2023-05-05 09:59:07,691:INFO:              m2cgen: Not installed
2023-05-05 09:59:07,691:INFO:           evidently: Not installed
2023-05-05 09:59:07,691:INFO:               fugue: Not installed
2023-05-05 09:59:07,691:INFO:           streamlit: Not installed
2023-05-05 09:59:07,692:INFO:             prophet: Not installed
2023-05-05 09:59:07,692:INFO:None
2023-05-05 09:59:07,692:INFO:Set up data.
2023-05-05 09:59:07,842:INFO:Set up train/test split.
2023-05-05 09:59:07,923:INFO:Set up index.
2023-05-05 09:59:07,925:INFO:Set up folding strategy.
2023-05-05 09:59:07,925:INFO:Assigning column types.
2023-05-05 09:59:07,931:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-05-05 09:59:07,983:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-05-05 09:59:07,984:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-05 09:59:08,015:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 09:59:08,015:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 09:59:08,058:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-05-05 09:59:08,059:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-05 09:59:08,086:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 09:59:08,087:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 09:59:08,087:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-05-05 09:59:08,129:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-05 09:59:08,154:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 09:59:08,155:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 09:59:08,200:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-05 09:59:08,227:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 09:59:08,227:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 09:59:08,227:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-05-05 09:59:08,297:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 09:59:08,299:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 09:59:08,373:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 09:59:08,374:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 09:59:08,375:INFO:Preparing preprocessing pipeline...
2023-05-05 09:59:08,376:INFO:Set up label encoding.
2023-05-05 09:59:08,376:INFO:Set up simple imputation.
2023-05-05 09:59:08,434:INFO:Set up encoding of ordinal features.
2023-05-05 09:59:08,436:INFO:Set up encoding of categorical features.
2023-05-05 11:10:03,781:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-05 11:10:03,781:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-05 11:10:03,781:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-05 11:10:03,781:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-05 11:10:04,665:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-05-05 11:10:12,344:INFO:PyCaret ClassificationExperiment
2023-05-05 11:10:12,344:INFO:Logging name: clf-default-name
2023-05-05 11:10:12,345:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-05-05 11:10:12,345:INFO:version 3.0.0
2023-05-05 11:10:12,345:INFO:Initializing setup()
2023-05-05 11:10:12,345:INFO:self.USI: fdc9
2023-05-05 11:10:12,345:INFO:self._variable_keys: {'y_train', 'data', 'y_test', 'logging_param', 'seed', 'target_param', 'pipeline', 'gpu_n_jobs_param', 'gpu_param', 'y', 'exp_name_log', 'idx', 'fix_imbalance', 'exp_id', '_available_plots', 'X_test', 'log_plots_param', 'USI', 'fold_generator', 'n_jobs_param', 'fold_shuffle_param', 'html_param', 'X', 'memory', '_ml_usecase', 'X_train', 'fold_groups_param', 'is_multiclass'}
2023-05-05 11:10:12,345:INFO:Checking environment
2023-05-05 11:10:12,345:INFO:python_version: 3.10.9
2023-05-05 11:10:12,345:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2023-05-05 11:10:12,345:INFO:machine: AMD64
2023-05-05 11:10:12,345:INFO:platform: Windows-10-10.0.22621-SP0
2023-05-05 11:10:12,345:INFO:Memory: svmem(total=16760946688, available=6755897344, percent=59.7, used=10005049344, free=6755897344)
2023-05-05 11:10:12,345:INFO:Physical Core: 4
2023-05-05 11:10:12,345:INFO:Logical Core: 8
2023-05-05 11:10:12,345:INFO:Checking libraries
2023-05-05 11:10:12,345:INFO:System:
2023-05-05 11:10:12,345:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2023-05-05 11:10:12,345:INFO:executable: c:\Users\DELL\anaconda3\python.exe
2023-05-05 11:10:12,346:INFO:   machine: Windows-10-10.0.22621-SP0
2023-05-05 11:10:12,346:INFO:PyCaret required dependencies:
2023-05-05 11:10:12,346:INFO:                 pip: 22.3.1
2023-05-05 11:10:12,346:INFO:          setuptools: 65.6.3
2023-05-05 11:10:12,346:INFO:             pycaret: 3.0.0
2023-05-05 11:10:12,346:INFO:             IPython: 8.10.0
2023-05-05 11:10:12,346:INFO:          ipywidgets: 7.6.5
2023-05-05 11:10:12,346:INFO:                tqdm: 4.64.1
2023-05-05 11:10:12,346:INFO:               numpy: 1.23.5
2023-05-05 11:10:12,346:INFO:              pandas: 1.5.3
2023-05-05 11:10:12,346:INFO:              jinja2: 3.1.2
2023-05-05 11:10:12,346:INFO:               scipy: 1.10.0
2023-05-05 11:10:12,346:INFO:              joblib: 1.2.0
2023-05-05 11:10:12,346:INFO:             sklearn: 1.2.1
2023-05-05 11:10:12,346:INFO:                pyod: 1.0.9
2023-05-05 11:10:12,346:INFO:            imblearn: 0.10.1
2023-05-05 11:10:12,346:INFO:   category_encoders: 2.6.0
2023-05-05 11:10:12,346:INFO:            lightgbm: 3.3.5
2023-05-05 11:10:12,347:INFO:               numba: 0.56.4
2023-05-05 11:10:12,347:INFO:            requests: 2.28.1
2023-05-05 11:10:12,347:INFO:          matplotlib: 3.7.0
2023-05-05 11:10:12,347:INFO:          scikitplot: 0.3.7
2023-05-05 11:10:12,347:INFO:         yellowbrick: 1.5
2023-05-05 11:10:12,347:INFO:              plotly: 5.9.0
2023-05-05 11:10:12,347:INFO:             kaleido: 0.2.1
2023-05-05 11:10:12,347:INFO:         statsmodels: 0.13.5
2023-05-05 11:10:12,347:INFO:              sktime: 0.18.0
2023-05-05 11:10:12,347:INFO:               tbats: 1.1.3
2023-05-05 11:10:12,347:INFO:            pmdarima: 2.0.3
2023-05-05 11:10:12,347:INFO:              psutil: 5.9.0
2023-05-05 11:10:12,347:INFO:PyCaret optional dependencies:
2023-05-05 11:10:12,649:INFO:                shap: Not installed
2023-05-05 11:10:12,649:INFO:           interpret: Not installed
2023-05-05 11:10:12,649:INFO:                umap: Not installed
2023-05-05 11:10:12,649:INFO:    pandas_profiling: Not installed
2023-05-05 11:10:12,649:INFO:  explainerdashboard: Not installed
2023-05-05 11:10:12,649:INFO:             autoviz: Not installed
2023-05-05 11:10:12,649:INFO:           fairlearn: Not installed
2023-05-05 11:10:12,649:INFO:             xgboost: Not installed
2023-05-05 11:10:12,649:INFO:            catboost: Not installed
2023-05-05 11:10:12,649:INFO:              kmodes: Not installed
2023-05-05 11:10:12,649:INFO:             mlxtend: Not installed
2023-05-05 11:10:12,649:INFO:       statsforecast: Not installed
2023-05-05 11:10:12,649:INFO:        tune_sklearn: Not installed
2023-05-05 11:10:12,649:INFO:                 ray: Not installed
2023-05-05 11:10:12,649:INFO:            hyperopt: Not installed
2023-05-05 11:10:12,649:INFO:              optuna: Not installed
2023-05-05 11:10:12,649:INFO:               skopt: Not installed
2023-05-05 11:10:12,649:INFO:              mlflow: Not installed
2023-05-05 11:10:12,649:INFO:              gradio: Not installed
2023-05-05 11:10:12,649:INFO:             fastapi: 0.95.1
2023-05-05 11:10:12,650:INFO:             uvicorn: 0.22.0
2023-05-05 11:10:12,650:INFO:              m2cgen: Not installed
2023-05-05 11:10:12,650:INFO:           evidently: Not installed
2023-05-05 11:10:12,650:INFO:               fugue: Not installed
2023-05-05 11:10:12,650:INFO:           streamlit: Not installed
2023-05-05 11:10:12,650:INFO:             prophet: Not installed
2023-05-05 11:10:12,650:INFO:None
2023-05-05 11:10:12,650:INFO:Set up data.
2023-05-05 11:10:12,814:INFO:Set up train/test split.
2023-05-05 11:10:12,900:INFO:Set up index.
2023-05-05 11:10:12,901:INFO:Set up folding strategy.
2023-05-05 11:10:12,901:INFO:Assigning column types.
2023-05-05 11:10:12,910:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-05-05 11:10:12,956:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-05-05 11:10:12,958:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-05 11:10:12,993:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:10:13,269:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:10:13,336:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-05-05 11:10:13,338:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-05 11:10:13,377:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:10:13,377:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:10:13,377:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-05-05 11:10:13,426:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-05 11:10:13,461:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:10:13,462:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:10:13,512:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-05 11:10:13,543:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:10:13,543:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:10:13,544:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-05-05 11:10:13,626:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:10:13,626:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:10:13,710:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:10:13,710:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:10:13,712:INFO:Preparing preprocessing pipeline...
2023-05-05 11:10:13,714:INFO:Set up label encoding.
2023-05-05 11:10:13,714:INFO:Set up simple imputation.
2023-05-05 11:10:13,780:INFO:Set up encoding of ordinal features.
2023-05-05 11:10:13,782:INFO:Set up encoding of categorical features.
2023-05-05 11:21:26,988:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-05 11:21:26,988:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-05 11:21:26,988:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-05 11:21:26,988:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-05 11:21:27,812:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-05-05 11:22:49,811:INFO:PyCaret ClassificationExperiment
2023-05-05 11:22:49,811:INFO:Logging name: clf-default-name
2023-05-05 11:22:49,811:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-05-05 11:22:49,811:INFO:version 3.0.0
2023-05-05 11:22:49,811:INFO:Initializing setup()
2023-05-05 11:22:49,812:INFO:self.USI: 0a3e
2023-05-05 11:22:49,812:INFO:self._variable_keys: {'exp_id', 'y_train', 'USI', 'fold_groups_param', 'n_jobs_param', 'y', 'is_multiclass', 'fix_imbalance', '_ml_usecase', 'seed', 'fold_shuffle_param', 'memory', 'data', 'logging_param', 'pipeline', 'X_test', 'X_train', 'target_param', 'gpu_param', 'fold_generator', 'exp_name_log', '_available_plots', 'idx', 'X', 'gpu_n_jobs_param', 'log_plots_param', 'html_param', 'y_test'}
2023-05-05 11:22:49,812:INFO:Checking environment
2023-05-05 11:22:49,812:INFO:python_version: 3.10.9
2023-05-05 11:22:49,812:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2023-05-05 11:22:49,812:INFO:machine: AMD64
2023-05-05 11:22:49,812:INFO:platform: Windows-10-10.0.22621-SP0
2023-05-05 11:22:49,812:INFO:Memory: svmem(total=16760946688, available=7121317888, percent=57.5, used=9639628800, free=7121317888)
2023-05-05 11:22:49,812:INFO:Physical Core: 4
2023-05-05 11:22:49,812:INFO:Logical Core: 8
2023-05-05 11:22:49,812:INFO:Checking libraries
2023-05-05 11:22:49,812:INFO:System:
2023-05-05 11:22:49,812:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2023-05-05 11:22:49,812:INFO:executable: c:\Users\DELL\anaconda3\python.exe
2023-05-05 11:22:49,812:INFO:   machine: Windows-10-10.0.22621-SP0
2023-05-05 11:22:49,812:INFO:PyCaret required dependencies:
2023-05-05 11:22:49,812:INFO:                 pip: 22.3.1
2023-05-05 11:22:49,812:INFO:          setuptools: 65.6.3
2023-05-05 11:22:49,812:INFO:             pycaret: 3.0.0
2023-05-05 11:22:49,812:INFO:             IPython: 8.10.0
2023-05-05 11:22:49,813:INFO:          ipywidgets: 7.6.5
2023-05-05 11:22:49,813:INFO:                tqdm: 4.64.1
2023-05-05 11:22:49,813:INFO:               numpy: 1.23.5
2023-05-05 11:22:49,813:INFO:              pandas: 1.5.3
2023-05-05 11:22:49,813:INFO:              jinja2: 3.1.2
2023-05-05 11:22:49,813:INFO:               scipy: 1.10.0
2023-05-05 11:22:49,813:INFO:              joblib: 1.2.0
2023-05-05 11:22:49,813:INFO:             sklearn: 1.2.1
2023-05-05 11:22:49,813:INFO:                pyod: 1.0.9
2023-05-05 11:22:49,813:INFO:            imblearn: 0.10.1
2023-05-05 11:22:49,813:INFO:   category_encoders: 2.6.0
2023-05-05 11:22:49,813:INFO:            lightgbm: 3.3.5
2023-05-05 11:22:49,814:INFO:               numba: 0.56.4
2023-05-05 11:22:49,814:INFO:            requests: 2.28.1
2023-05-05 11:22:49,814:INFO:          matplotlib: 3.7.0
2023-05-05 11:22:49,814:INFO:          scikitplot: 0.3.7
2023-05-05 11:22:49,814:INFO:         yellowbrick: 1.5
2023-05-05 11:22:49,814:INFO:              plotly: 5.9.0
2023-05-05 11:22:49,814:INFO:             kaleido: 0.2.1
2023-05-05 11:22:49,814:INFO:         statsmodels: 0.13.5
2023-05-05 11:22:49,814:INFO:              sktime: 0.18.0
2023-05-05 11:22:49,814:INFO:               tbats: 1.1.3
2023-05-05 11:22:49,814:INFO:            pmdarima: 2.0.3
2023-05-05 11:22:49,814:INFO:              psutil: 5.9.0
2023-05-05 11:22:49,814:INFO:PyCaret optional dependencies:
2023-05-05 11:22:50,087:INFO:                shap: Not installed
2023-05-05 11:22:50,087:INFO:           interpret: Not installed
2023-05-05 11:22:50,087:INFO:                umap: Not installed
2023-05-05 11:22:50,087:INFO:    pandas_profiling: Not installed
2023-05-05 11:22:50,087:INFO:  explainerdashboard: Not installed
2023-05-05 11:22:50,087:INFO:             autoviz: Not installed
2023-05-05 11:22:50,087:INFO:           fairlearn: Not installed
2023-05-05 11:22:50,087:INFO:             xgboost: Not installed
2023-05-05 11:22:50,087:INFO:            catboost: Not installed
2023-05-05 11:22:50,087:INFO:              kmodes: Not installed
2023-05-05 11:22:50,087:INFO:             mlxtend: Not installed
2023-05-05 11:22:50,087:INFO:       statsforecast: Not installed
2023-05-05 11:22:50,087:INFO:        tune_sklearn: Not installed
2023-05-05 11:22:50,087:INFO:                 ray: Not installed
2023-05-05 11:22:50,087:INFO:            hyperopt: Not installed
2023-05-05 11:22:50,087:INFO:              optuna: Not installed
2023-05-05 11:22:50,087:INFO:               skopt: Not installed
2023-05-05 11:22:50,087:INFO:              mlflow: Not installed
2023-05-05 11:22:50,087:INFO:              gradio: Not installed
2023-05-05 11:22:50,087:INFO:             fastapi: 0.95.1
2023-05-05 11:22:50,087:INFO:             uvicorn: 0.22.0
2023-05-05 11:22:50,087:INFO:              m2cgen: Not installed
2023-05-05 11:22:50,088:INFO:           evidently: Not installed
2023-05-05 11:22:50,088:INFO:               fugue: Not installed
2023-05-05 11:22:50,088:INFO:           streamlit: Not installed
2023-05-05 11:22:50,088:INFO:             prophet: Not installed
2023-05-05 11:22:50,088:INFO:None
2023-05-05 11:22:50,088:INFO:Set up data.
2023-05-05 11:22:50,280:INFO:Set up train/test split.
2023-05-05 11:22:50,361:INFO:Set up index.
2023-05-05 11:22:50,361:INFO:Set up folding strategy.
2023-05-05 11:22:50,361:INFO:Assigning column types.
2023-05-05 11:22:50,367:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-05-05 11:22:50,412:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-05-05 11:22:50,414:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-05 11:22:50,451:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:22:50,738:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:22:50,792:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-05-05 11:22:50,794:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-05 11:22:50,824:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:22:50,825:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:22:50,825:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-05-05 11:22:50,874:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-05 11:22:50,901:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:22:50,902:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:22:50,945:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-05 11:22:50,974:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:22:50,975:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:22:50,975:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-05-05 11:22:51,043:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:22:51,043:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:22:51,112:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:22:51,112:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:22:51,114:INFO:Preparing preprocessing pipeline...
2023-05-05 11:22:51,116:INFO:Set up label encoding.
2023-05-05 11:22:51,116:INFO:Set up simple imputation.
2023-05-05 11:22:51,188:INFO:Set up encoding of ordinal features.
2023-05-05 11:22:51,193:INFO:Set up encoding of categorical features.
2023-05-05 11:23:06,797:INFO:PyCaret ClassificationExperiment
2023-05-05 11:23:06,797:INFO:Logging name: clf-default-name
2023-05-05 11:23:06,797:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-05-05 11:23:06,797:INFO:version 3.0.0
2023-05-05 11:23:06,797:INFO:Initializing setup()
2023-05-05 11:23:06,797:INFO:self.USI: 22b4
2023-05-05 11:23:06,797:INFO:self._variable_keys: {'exp_id', 'y_train', 'USI', 'fold_groups_param', 'n_jobs_param', 'y', 'is_multiclass', 'fix_imbalance', '_ml_usecase', 'seed', 'fold_shuffle_param', 'memory', 'data', 'logging_param', 'pipeline', 'X_test', 'X_train', 'target_param', 'gpu_param', 'fold_generator', 'exp_name_log', '_available_plots', 'idx', 'X', 'gpu_n_jobs_param', 'log_plots_param', 'html_param', 'y_test'}
2023-05-05 11:23:06,797:INFO:Checking environment
2023-05-05 11:23:06,797:INFO:python_version: 3.10.9
2023-05-05 11:23:06,797:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2023-05-05 11:23:06,797:INFO:machine: AMD64
2023-05-05 11:23:06,798:INFO:platform: Windows-10-10.0.22621-SP0
2023-05-05 11:23:06,798:INFO:Memory: svmem(total=16760946688, available=6461894656, percent=61.4, used=10299052032, free=6461894656)
2023-05-05 11:23:06,798:INFO:Physical Core: 4
2023-05-05 11:23:06,798:INFO:Logical Core: 8
2023-05-05 11:23:06,798:INFO:Checking libraries
2023-05-05 11:23:06,798:INFO:System:
2023-05-05 11:23:06,798:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2023-05-05 11:23:06,798:INFO:executable: c:\Users\DELL\anaconda3\python.exe
2023-05-05 11:23:06,798:INFO:   machine: Windows-10-10.0.22621-SP0
2023-05-05 11:23:06,798:INFO:PyCaret required dependencies:
2023-05-05 11:23:06,798:INFO:                 pip: 22.3.1
2023-05-05 11:23:06,798:INFO:          setuptools: 65.6.3
2023-05-05 11:23:06,798:INFO:             pycaret: 3.0.0
2023-05-05 11:23:06,798:INFO:             IPython: 8.10.0
2023-05-05 11:23:06,798:INFO:          ipywidgets: 7.6.5
2023-05-05 11:23:06,798:INFO:                tqdm: 4.64.1
2023-05-05 11:23:06,798:INFO:               numpy: 1.23.5
2023-05-05 11:23:06,798:INFO:              pandas: 1.5.3
2023-05-05 11:23:06,798:INFO:              jinja2: 3.1.2
2023-05-05 11:23:06,799:INFO:               scipy: 1.10.0
2023-05-05 11:23:06,799:INFO:              joblib: 1.2.0
2023-05-05 11:23:06,799:INFO:             sklearn: 1.2.1
2023-05-05 11:23:06,799:INFO:                pyod: 1.0.9
2023-05-05 11:23:06,799:INFO:            imblearn: 0.10.1
2023-05-05 11:23:06,799:INFO:   category_encoders: 2.6.0
2023-05-05 11:23:06,799:INFO:            lightgbm: 3.3.5
2023-05-05 11:23:06,799:INFO:               numba: 0.56.4
2023-05-05 11:23:06,799:INFO:            requests: 2.28.1
2023-05-05 11:23:06,799:INFO:          matplotlib: 3.7.0
2023-05-05 11:23:06,799:INFO:          scikitplot: 0.3.7
2023-05-05 11:23:06,799:INFO:         yellowbrick: 1.5
2023-05-05 11:23:06,799:INFO:              plotly: 5.9.0
2023-05-05 11:23:06,799:INFO:             kaleido: 0.2.1
2023-05-05 11:23:06,799:INFO:         statsmodels: 0.13.5
2023-05-05 11:23:06,799:INFO:              sktime: 0.18.0
2023-05-05 11:23:06,799:INFO:               tbats: 1.1.3
2023-05-05 11:23:06,799:INFO:            pmdarima: 2.0.3
2023-05-05 11:23:06,799:INFO:              psutil: 5.9.0
2023-05-05 11:23:06,799:INFO:PyCaret optional dependencies:
2023-05-05 11:23:06,799:INFO:                shap: Not installed
2023-05-05 11:23:06,800:INFO:           interpret: Not installed
2023-05-05 11:23:06,800:INFO:                umap: Not installed
2023-05-05 11:23:06,800:INFO:    pandas_profiling: Not installed
2023-05-05 11:23:06,800:INFO:  explainerdashboard: Not installed
2023-05-05 11:23:06,800:INFO:             autoviz: Not installed
2023-05-05 11:23:06,800:INFO:           fairlearn: Not installed
2023-05-05 11:23:06,800:INFO:             xgboost: Not installed
2023-05-05 11:23:06,800:INFO:            catboost: Not installed
2023-05-05 11:23:06,800:INFO:              kmodes: Not installed
2023-05-05 11:23:06,800:INFO:             mlxtend: Not installed
2023-05-05 11:23:06,800:INFO:       statsforecast: Not installed
2023-05-05 11:23:06,800:INFO:        tune_sklearn: Not installed
2023-05-05 11:23:06,800:INFO:                 ray: Not installed
2023-05-05 11:23:06,800:INFO:            hyperopt: Not installed
2023-05-05 11:23:06,800:INFO:              optuna: Not installed
2023-05-05 11:23:06,800:INFO:               skopt: Not installed
2023-05-05 11:23:06,800:INFO:              mlflow: Not installed
2023-05-05 11:23:06,800:INFO:              gradio: Not installed
2023-05-05 11:23:06,800:INFO:             fastapi: 0.95.1
2023-05-05 11:23:06,800:INFO:             uvicorn: 0.22.0
2023-05-05 11:23:06,801:INFO:              m2cgen: Not installed
2023-05-05 11:23:06,801:INFO:           evidently: Not installed
2023-05-05 11:23:06,801:INFO:               fugue: Not installed
2023-05-05 11:23:06,801:INFO:           streamlit: Not installed
2023-05-05 11:23:06,801:INFO:             prophet: Not installed
2023-05-05 11:23:06,801:INFO:None
2023-05-05 11:23:06,801:INFO:Set up data.
2023-05-05 11:23:06,963:INFO:Set up train/test split.
2023-05-05 11:23:07,044:INFO:Set up index.
2023-05-05 11:23:07,044:INFO:Set up folding strategy.
2023-05-05 11:23:07,044:INFO:Assigning column types.
2023-05-05 11:23:07,050:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-05-05 11:23:07,096:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-05-05 11:23:07,096:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-05 11:23:07,126:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:23:07,127:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:23:07,172:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-05-05 11:23:07,173:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-05 11:23:07,205:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:23:07,205:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:23:07,205:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-05-05 11:23:07,250:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-05 11:23:07,275:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:23:07,275:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:23:07,325:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-05 11:23:07,353:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:23:07,354:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:23:07,354:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-05-05 11:23:07,432:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:23:07,432:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:23:07,503:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:23:07,503:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-05 11:23:07,504:INFO:Preparing preprocessing pipeline...
2023-05-05 11:23:07,506:INFO:Set up label encoding.
2023-05-05 11:23:07,506:INFO:Set up simple imputation.
2023-05-05 11:23:07,569:INFO:Set up encoding of ordinal features.
2023-05-05 11:23:07,572:INFO:Set up encoding of categorical features.
2023-05-06 09:20:29,340:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-06 09:20:29,340:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-06 09:20:29,340:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-06 09:20:29,340:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-06 09:20:30,941:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-05-06 09:20:39,038:INFO:PyCaret ClassificationExperiment
2023-05-06 09:20:39,038:INFO:Logging name: clf-default-name
2023-05-06 09:20:39,038:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-05-06 09:20:39,038:INFO:version 3.0.0
2023-05-06 09:20:39,038:INFO:Initializing setup()
2023-05-06 09:20:39,038:INFO:self.USI: 1cf1
2023-05-06 09:20:39,038:INFO:self._variable_keys: {'logging_param', 'pipeline', 'memory', 'fix_imbalance', 'y', 'target_param', 'data', 'fold_generator', 'USI', 'exp_name_log', 'y_test', 'gpu_param', 'log_plots_param', '_ml_usecase', 'idx', 'html_param', 'gpu_n_jobs_param', 'fold_groups_param', 'fold_shuffle_param', 'X_test', 'is_multiclass', 'X', 'X_train', 'seed', 'exp_id', 'y_train', 'n_jobs_param', '_available_plots'}
2023-05-06 09:20:39,038:INFO:Checking environment
2023-05-06 09:20:39,038:INFO:python_version: 3.10.9
2023-05-06 09:20:39,039:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2023-05-06 09:20:39,039:INFO:machine: AMD64
2023-05-06 09:20:39,039:INFO:platform: Windows-10-10.0.22621-SP0
2023-05-06 09:20:39,039:INFO:Memory: svmem(total=16760946688, available=6467903488, percent=61.4, used=10293043200, free=6467903488)
2023-05-06 09:20:39,039:INFO:Physical Core: 4
2023-05-06 09:20:39,039:INFO:Logical Core: 8
2023-05-06 09:20:39,039:INFO:Checking libraries
2023-05-06 09:20:39,039:INFO:System:
2023-05-06 09:20:39,039:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2023-05-06 09:20:39,039:INFO:executable: c:\Users\DELL\anaconda3\python.exe
2023-05-06 09:20:39,039:INFO:   machine: Windows-10-10.0.22621-SP0
2023-05-06 09:20:39,039:INFO:PyCaret required dependencies:
2023-05-06 09:20:39,039:INFO:                 pip: 22.3.1
2023-05-06 09:20:39,039:INFO:          setuptools: 65.6.3
2023-05-06 09:20:39,040:INFO:             pycaret: 3.0.0
2023-05-06 09:20:39,040:INFO:             IPython: 8.10.0
2023-05-06 09:20:39,040:INFO:          ipywidgets: 7.6.5
2023-05-06 09:20:39,040:INFO:                tqdm: 4.64.1
2023-05-06 09:20:39,040:INFO:               numpy: 1.23.5
2023-05-06 09:20:39,040:INFO:              pandas: 1.5.3
2023-05-06 09:20:39,040:INFO:              jinja2: 3.1.2
2023-05-06 09:20:39,040:INFO:               scipy: 1.10.0
2023-05-06 09:20:39,040:INFO:              joblib: 1.2.0
2023-05-06 09:20:39,040:INFO:             sklearn: 1.2.1
2023-05-06 09:20:39,040:INFO:                pyod: 1.0.9
2023-05-06 09:20:39,040:INFO:            imblearn: 0.10.1
2023-05-06 09:20:39,040:INFO:   category_encoders: 2.6.0
2023-05-06 09:20:39,040:INFO:            lightgbm: 3.3.5
2023-05-06 09:20:39,040:INFO:               numba: 0.56.4
2023-05-06 09:20:39,040:INFO:            requests: 2.28.1
2023-05-06 09:20:39,040:INFO:          matplotlib: 3.7.0
2023-05-06 09:20:39,040:INFO:          scikitplot: 0.3.7
2023-05-06 09:20:39,040:INFO:         yellowbrick: 1.5
2023-05-06 09:20:39,040:INFO:              plotly: 5.9.0
2023-05-06 09:20:39,041:INFO:             kaleido: 0.2.1
2023-05-06 09:20:39,041:INFO:         statsmodels: 0.13.5
2023-05-06 09:20:39,041:INFO:              sktime: 0.18.0
2023-05-06 09:20:39,041:INFO:               tbats: 1.1.3
2023-05-06 09:20:39,041:INFO:            pmdarima: 2.0.3
2023-05-06 09:20:39,041:INFO:              psutil: 5.9.0
2023-05-06 09:20:39,041:INFO:PyCaret optional dependencies:
2023-05-06 09:20:39,390:INFO:                shap: Not installed
2023-05-06 09:20:39,391:INFO:           interpret: Not installed
2023-05-06 09:20:39,391:INFO:                umap: Not installed
2023-05-06 09:20:39,391:INFO:    pandas_profiling: Not installed
2023-05-06 09:20:39,391:INFO:  explainerdashboard: Not installed
2023-05-06 09:20:39,391:INFO:             autoviz: Not installed
2023-05-06 09:20:39,391:INFO:           fairlearn: Not installed
2023-05-06 09:20:39,391:INFO:             xgboost: Not installed
2023-05-06 09:20:39,391:INFO:            catboost: Not installed
2023-05-06 09:20:39,391:INFO:              kmodes: Not installed
2023-05-06 09:20:39,391:INFO:             mlxtend: Not installed
2023-05-06 09:20:39,391:INFO:       statsforecast: Not installed
2023-05-06 09:20:39,391:INFO:        tune_sklearn: Not installed
2023-05-06 09:20:39,391:INFO:                 ray: Not installed
2023-05-06 09:20:39,391:INFO:            hyperopt: Not installed
2023-05-06 09:20:39,391:INFO:              optuna: Not installed
2023-05-06 09:20:39,391:INFO:               skopt: Not installed
2023-05-06 09:20:39,391:INFO:              mlflow: Not installed
2023-05-06 09:20:39,391:INFO:              gradio: Not installed
2023-05-06 09:20:39,391:INFO:             fastapi: 0.95.1
2023-05-06 09:20:39,391:INFO:             uvicorn: 0.22.0
2023-05-06 09:20:39,392:INFO:              m2cgen: Not installed
2023-05-06 09:20:39,392:INFO:           evidently: Not installed
2023-05-06 09:20:39,392:INFO:               fugue: Not installed
2023-05-06 09:20:39,392:INFO:           streamlit: Not installed
2023-05-06 09:20:39,392:INFO:             prophet: Not installed
2023-05-06 09:20:39,392:INFO:None
2023-05-06 09:20:39,392:INFO:Set up data.
2023-05-06 09:20:39,546:INFO:Set up train/test split.
2023-05-06 09:20:39,639:INFO:Set up index.
2023-05-06 09:20:39,639:INFO:Set up folding strategy.
2023-05-06 09:20:39,639:INFO:Assigning column types.
2023-05-06 09:20:39,646:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-05-06 09:20:39,696:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-05-06 09:20:39,701:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-06 09:20:39,743:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:20:40,087:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:20:40,132:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-05-06 09:20:40,133:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-06 09:20:40,162:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:20:40,162:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:20:40,163:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-05-06 09:20:40,204:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-06 09:20:40,230:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:20:40,230:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:20:40,321:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-06 09:20:40,378:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:20:40,378:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:20:40,378:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-05-06 09:20:40,464:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:20:40,464:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:20:40,544:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:20:40,544:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:20:40,546:INFO:Preparing preprocessing pipeline...
2023-05-06 09:20:40,550:INFO:Set up label encoding.
2023-05-06 09:20:40,550:INFO:Set up simple imputation.
2023-05-06 09:20:40,638:INFO:Set up encoding of ordinal features.
2023-05-06 09:20:40,641:INFO:Set up encoding of categorical features.
2023-05-06 09:29:17,330:INFO:PyCaret ClassificationExperiment
2023-05-06 09:29:17,331:INFO:Logging name: clf-default-name
2023-05-06 09:29:17,331:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-05-06 09:29:17,332:INFO:version 3.0.0
2023-05-06 09:29:17,332:INFO:Initializing setup()
2023-05-06 09:29:17,332:INFO:self.USI: 473f
2023-05-06 09:29:17,332:INFO:self._variable_keys: {'logging_param', 'pipeline', 'memory', 'fix_imbalance', 'y', 'target_param', 'data', 'fold_generator', 'USI', 'exp_name_log', 'y_test', 'gpu_param', 'log_plots_param', '_ml_usecase', 'idx', 'html_param', 'gpu_n_jobs_param', 'fold_groups_param', 'fold_shuffle_param', 'X_test', 'is_multiclass', 'X', 'X_train', 'seed', 'exp_id', 'y_train', 'n_jobs_param', '_available_plots'}
2023-05-06 09:29:17,332:INFO:Checking environment
2023-05-06 09:29:17,332:INFO:python_version: 3.10.9
2023-05-06 09:29:17,332:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2023-05-06 09:29:17,333:INFO:machine: AMD64
2023-05-06 09:29:17,333:INFO:platform: Windows-10-10.0.22621-SP0
2023-05-06 09:29:17,334:INFO:Memory: svmem(total=16760946688, available=6128353280, percent=63.4, used=10632593408, free=6128353280)
2023-05-06 09:29:17,334:INFO:Physical Core: 4
2023-05-06 09:29:17,334:INFO:Logical Core: 8
2023-05-06 09:29:17,334:INFO:Checking libraries
2023-05-06 09:29:17,334:INFO:System:
2023-05-06 09:29:17,334:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2023-05-06 09:29:17,334:INFO:executable: c:\Users\DELL\anaconda3\python.exe
2023-05-06 09:29:17,334:INFO:   machine: Windows-10-10.0.22621-SP0
2023-05-06 09:29:17,334:INFO:PyCaret required dependencies:
2023-05-06 09:29:17,334:INFO:                 pip: 22.3.1
2023-05-06 09:29:17,334:INFO:          setuptools: 65.6.3
2023-05-06 09:29:17,336:INFO:             pycaret: 3.0.0
2023-05-06 09:29:17,336:INFO:             IPython: 8.10.0
2023-05-06 09:29:17,336:INFO:          ipywidgets: 7.6.5
2023-05-06 09:29:17,336:INFO:                tqdm: 4.64.1
2023-05-06 09:29:17,336:INFO:               numpy: 1.23.5
2023-05-06 09:29:17,336:INFO:              pandas: 1.5.3
2023-05-06 09:29:17,336:INFO:              jinja2: 3.1.2
2023-05-06 09:29:17,336:INFO:               scipy: 1.10.0
2023-05-06 09:29:17,336:INFO:              joblib: 1.2.0
2023-05-06 09:29:17,336:INFO:             sklearn: 1.2.1
2023-05-06 09:29:17,336:INFO:                pyod: 1.0.9
2023-05-06 09:29:17,336:INFO:            imblearn: 0.10.1
2023-05-06 09:29:17,337:INFO:   category_encoders: 2.6.0
2023-05-06 09:29:17,337:INFO:            lightgbm: 3.3.5
2023-05-06 09:29:17,337:INFO:               numba: 0.56.4
2023-05-06 09:29:17,337:INFO:            requests: 2.28.1
2023-05-06 09:29:17,337:INFO:          matplotlib: 3.7.0
2023-05-06 09:29:17,337:INFO:          scikitplot: 0.3.7
2023-05-06 09:29:17,337:INFO:         yellowbrick: 1.5
2023-05-06 09:29:17,337:INFO:              plotly: 5.9.0
2023-05-06 09:29:17,337:INFO:             kaleido: 0.2.1
2023-05-06 09:29:17,337:INFO:         statsmodels: 0.13.5
2023-05-06 09:29:17,337:INFO:              sktime: 0.18.0
2023-05-06 09:29:17,337:INFO:               tbats: 1.1.3
2023-05-06 09:29:17,337:INFO:            pmdarima: 2.0.3
2023-05-06 09:29:17,338:INFO:              psutil: 5.9.0
2023-05-06 09:29:17,338:INFO:PyCaret optional dependencies:
2023-05-06 09:29:17,338:INFO:                shap: Not installed
2023-05-06 09:29:17,338:INFO:           interpret: Not installed
2023-05-06 09:29:17,338:INFO:                umap: Not installed
2023-05-06 09:29:17,338:INFO:    pandas_profiling: Not installed
2023-05-06 09:29:17,338:INFO:  explainerdashboard: Not installed
2023-05-06 09:29:17,338:INFO:             autoviz: Not installed
2023-05-06 09:29:17,338:INFO:           fairlearn: Not installed
2023-05-06 09:29:17,338:INFO:             xgboost: Not installed
2023-05-06 09:29:17,338:INFO:            catboost: Not installed
2023-05-06 09:29:17,338:INFO:              kmodes: Not installed
2023-05-06 09:29:17,338:INFO:             mlxtend: Not installed
2023-05-06 09:29:17,338:INFO:       statsforecast: Not installed
2023-05-06 09:29:17,339:INFO:        tune_sklearn: Not installed
2023-05-06 09:29:17,339:INFO:                 ray: Not installed
2023-05-06 09:29:17,339:INFO:            hyperopt: Not installed
2023-05-06 09:29:17,339:INFO:              optuna: Not installed
2023-05-06 09:29:17,339:INFO:               skopt: Not installed
2023-05-06 09:29:17,339:INFO:              mlflow: Not installed
2023-05-06 09:29:17,339:INFO:              gradio: Not installed
2023-05-06 09:29:17,339:INFO:             fastapi: 0.95.1
2023-05-06 09:29:17,339:INFO:             uvicorn: 0.22.0
2023-05-06 09:29:17,339:INFO:              m2cgen: Not installed
2023-05-06 09:29:17,339:INFO:           evidently: Not installed
2023-05-06 09:29:17,339:INFO:               fugue: Not installed
2023-05-06 09:29:17,339:INFO:           streamlit: Not installed
2023-05-06 09:29:17,339:INFO:             prophet: Not installed
2023-05-06 09:29:17,340:INFO:None
2023-05-06 09:29:17,340:INFO:Set up data.
2023-05-06 09:29:17,536:INFO:Set up train/test split.
2023-05-06 09:29:17,617:INFO:Set up index.
2023-05-06 09:29:17,618:INFO:Set up folding strategy.
2023-05-06 09:29:17,618:INFO:Assigning column types.
2023-05-06 09:29:17,624:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-05-06 09:29:17,667:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-05-06 09:29:17,668:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-06 09:29:17,692:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:29:17,692:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:29:17,733:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-05-06 09:29:17,733:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-06 09:29:17,760:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:29:17,760:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:29:17,760:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-05-06 09:29:17,802:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-06 09:29:17,827:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:29:17,827:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:29:17,872:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-06 09:29:17,897:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:29:17,897:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:29:17,897:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-05-06 09:29:17,965:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:29:17,966:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:29:18,033:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:29:18,034:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:29:18,035:INFO:Preparing preprocessing pipeline...
2023-05-06 09:29:18,037:INFO:Set up label encoding.
2023-05-06 09:29:18,037:INFO:Set up simple imputation.
2023-05-06 09:29:18,100:INFO:Set up encoding of ordinal features.
2023-05-06 09:29:18,103:INFO:Set up encoding of categorical features.
2023-05-06 09:37:32,275:INFO:PyCaret ClassificationExperiment
2023-05-06 09:37:32,275:INFO:Logging name: clf-default-name
2023-05-06 09:37:32,275:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-05-06 09:37:32,275:INFO:version 3.0.0
2023-05-06 09:37:32,275:INFO:Initializing setup()
2023-05-06 09:37:32,275:INFO:self.USI: 4af9
2023-05-06 09:37:32,275:INFO:self._variable_keys: {'logging_param', 'pipeline', 'memory', 'fix_imbalance', 'y', 'target_param', 'data', 'fold_generator', 'USI', 'exp_name_log', 'y_test', 'gpu_param', 'log_plots_param', '_ml_usecase', 'idx', 'html_param', 'gpu_n_jobs_param', 'fold_groups_param', 'fold_shuffle_param', 'X_test', 'is_multiclass', 'X', 'X_train', 'seed', 'exp_id', 'y_train', 'n_jobs_param', '_available_plots'}
2023-05-06 09:37:32,275:INFO:Checking environment
2023-05-06 09:37:32,275:INFO:python_version: 3.10.9
2023-05-06 09:37:32,275:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2023-05-06 09:37:32,275:INFO:machine: AMD64
2023-05-06 09:37:32,275:INFO:platform: Windows-10-10.0.22621-SP0
2023-05-06 09:37:32,275:INFO:Memory: svmem(total=16760946688, available=5541908480, percent=66.9, used=11219038208, free=5541908480)
2023-05-06 09:37:32,275:INFO:Physical Core: 4
2023-05-06 09:37:32,275:INFO:Logical Core: 8
2023-05-06 09:37:32,276:INFO:Checking libraries
2023-05-06 09:37:32,276:INFO:System:
2023-05-06 09:37:32,276:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2023-05-06 09:37:32,276:INFO:executable: c:\Users\DELL\anaconda3\python.exe
2023-05-06 09:37:32,276:INFO:   machine: Windows-10-10.0.22621-SP0
2023-05-06 09:37:32,276:INFO:PyCaret required dependencies:
2023-05-06 09:37:32,276:INFO:                 pip: 22.3.1
2023-05-06 09:37:32,276:INFO:          setuptools: 65.6.3
2023-05-06 09:37:32,276:INFO:             pycaret: 3.0.0
2023-05-06 09:37:32,276:INFO:             IPython: 8.10.0
2023-05-06 09:37:32,276:INFO:          ipywidgets: 7.6.5
2023-05-06 09:37:32,276:INFO:                tqdm: 4.64.1
2023-05-06 09:37:32,276:INFO:               numpy: 1.23.5
2023-05-06 09:37:32,276:INFO:              pandas: 1.5.3
2023-05-06 09:37:32,276:INFO:              jinja2: 3.1.2
2023-05-06 09:37:32,276:INFO:               scipy: 1.10.0
2023-05-06 09:37:32,276:INFO:              joblib: 1.2.0
2023-05-06 09:37:32,276:INFO:             sklearn: 1.2.1
2023-05-06 09:37:32,276:INFO:                pyod: 1.0.9
2023-05-06 09:37:32,276:INFO:            imblearn: 0.10.1
2023-05-06 09:37:32,276:INFO:   category_encoders: 2.6.0
2023-05-06 09:37:32,276:INFO:            lightgbm: 3.3.5
2023-05-06 09:37:32,277:INFO:               numba: 0.56.4
2023-05-06 09:37:32,277:INFO:            requests: 2.28.1
2023-05-06 09:37:32,277:INFO:          matplotlib: 3.7.0
2023-05-06 09:37:32,277:INFO:          scikitplot: 0.3.7
2023-05-06 09:37:32,277:INFO:         yellowbrick: 1.5
2023-05-06 09:37:32,277:INFO:              plotly: 5.9.0
2023-05-06 09:37:32,277:INFO:             kaleido: 0.2.1
2023-05-06 09:37:32,277:INFO:         statsmodels: 0.13.5
2023-05-06 09:37:32,277:INFO:              sktime: 0.18.0
2023-05-06 09:37:32,277:INFO:               tbats: 1.1.3
2023-05-06 09:37:32,277:INFO:            pmdarima: 2.0.3
2023-05-06 09:37:32,277:INFO:              psutil: 5.9.0
2023-05-06 09:37:32,277:INFO:PyCaret optional dependencies:
2023-05-06 09:37:32,277:INFO:                shap: Not installed
2023-05-06 09:37:32,277:INFO:           interpret: Not installed
2023-05-06 09:37:32,277:INFO:                umap: Not installed
2023-05-06 09:37:32,277:INFO:    pandas_profiling: Not installed
2023-05-06 09:37:32,277:INFO:  explainerdashboard: Not installed
2023-05-06 09:37:32,277:INFO:             autoviz: Not installed
2023-05-06 09:37:32,277:INFO:           fairlearn: Not installed
2023-05-06 09:37:32,277:INFO:             xgboost: Not installed
2023-05-06 09:37:32,277:INFO:            catboost: Not installed
2023-05-06 09:37:32,278:INFO:              kmodes: Not installed
2023-05-06 09:37:32,278:INFO:             mlxtend: Not installed
2023-05-06 09:37:32,278:INFO:       statsforecast: Not installed
2023-05-06 09:37:32,278:INFO:        tune_sklearn: Not installed
2023-05-06 09:37:32,278:INFO:                 ray: Not installed
2023-05-06 09:37:32,278:INFO:            hyperopt: Not installed
2023-05-06 09:37:32,278:INFO:              optuna: Not installed
2023-05-06 09:37:32,278:INFO:               skopt: Not installed
2023-05-06 09:37:32,278:INFO:              mlflow: Not installed
2023-05-06 09:37:32,278:INFO:              gradio: Not installed
2023-05-06 09:37:32,278:INFO:             fastapi: 0.95.1
2023-05-06 09:37:32,278:INFO:             uvicorn: 0.22.0
2023-05-06 09:37:32,278:INFO:              m2cgen: Not installed
2023-05-06 09:37:32,278:INFO:           evidently: Not installed
2023-05-06 09:37:32,278:INFO:               fugue: Not installed
2023-05-06 09:37:32,278:INFO:           streamlit: Not installed
2023-05-06 09:37:32,278:INFO:             prophet: Not installed
2023-05-06 09:37:32,278:INFO:None
2023-05-06 09:37:32,278:INFO:Set up data.
2023-05-06 09:37:32,426:INFO:Set up train/test split.
2023-05-06 09:37:32,504:INFO:Set up index.
2023-05-06 09:37:32,504:INFO:Set up folding strategy.
2023-05-06 09:37:32,504:INFO:Assigning column types.
2023-05-06 09:37:32,511:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-05-06 09:37:32,560:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-05-06 09:37:32,561:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-06 09:37:32,587:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:37:32,588:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:37:32,628:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-05-06 09:37:32,628:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-06 09:37:32,655:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:37:32,655:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:37:32,655:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-05-06 09:37:32,697:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-06 09:37:32,723:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:37:32,724:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:37:32,765:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-06 09:37:32,791:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:37:32,791:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:37:32,792:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-05-06 09:37:32,859:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:37:32,859:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:37:32,926:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:37:32,927:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:37:32,928:INFO:Preparing preprocessing pipeline...
2023-05-06 09:37:32,929:INFO:Set up label encoding.
2023-05-06 09:37:32,929:INFO:Set up simple imputation.
2023-05-06 09:37:32,981:INFO:Set up encoding of ordinal features.
2023-05-06 09:37:32,984:INFO:Set up encoding of categorical features.
2023-05-06 09:37:40,459:INFO:PyCaret ClassificationExperiment
2023-05-06 09:37:40,459:INFO:Logging name: clf-default-name
2023-05-06 09:37:40,459:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-05-06 09:37:40,459:INFO:version 3.0.0
2023-05-06 09:37:40,459:INFO:Initializing setup()
2023-05-06 09:37:40,459:INFO:self.USI: d1cc
2023-05-06 09:37:40,459:INFO:self._variable_keys: {'logging_param', 'pipeline', 'memory', 'fix_imbalance', 'y', 'target_param', 'data', 'fold_generator', 'USI', 'exp_name_log', 'y_test', 'gpu_param', 'log_plots_param', '_ml_usecase', 'idx', 'html_param', 'gpu_n_jobs_param', 'fold_groups_param', 'fold_shuffle_param', 'X_test', 'is_multiclass', 'X', 'X_train', 'seed', 'exp_id', 'y_train', 'n_jobs_param', '_available_plots'}
2023-05-06 09:37:40,459:INFO:Checking environment
2023-05-06 09:37:40,459:INFO:python_version: 3.10.9
2023-05-06 09:37:40,459:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2023-05-06 09:37:40,459:INFO:machine: AMD64
2023-05-06 09:37:40,459:INFO:platform: Windows-10-10.0.22621-SP0
2023-05-06 09:37:40,459:INFO:Memory: svmem(total=16760946688, available=4956401664, percent=70.4, used=11804545024, free=4956401664)
2023-05-06 09:37:40,459:INFO:Physical Core: 4
2023-05-06 09:37:40,459:INFO:Logical Core: 8
2023-05-06 09:37:40,459:INFO:Checking libraries
2023-05-06 09:37:40,459:INFO:System:
2023-05-06 09:37:40,460:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2023-05-06 09:37:40,460:INFO:executable: c:\Users\DELL\anaconda3\python.exe
2023-05-06 09:37:40,460:INFO:   machine: Windows-10-10.0.22621-SP0
2023-05-06 09:37:40,460:INFO:PyCaret required dependencies:
2023-05-06 09:37:40,460:INFO:                 pip: 22.3.1
2023-05-06 09:37:40,460:INFO:          setuptools: 65.6.3
2023-05-06 09:37:40,460:INFO:             pycaret: 3.0.0
2023-05-06 09:37:40,460:INFO:             IPython: 8.10.0
2023-05-06 09:37:40,460:INFO:          ipywidgets: 7.6.5
2023-05-06 09:37:40,460:INFO:                tqdm: 4.64.1
2023-05-06 09:37:40,461:INFO:               numpy: 1.23.5
2023-05-06 09:37:40,461:INFO:              pandas: 1.5.3
2023-05-06 09:37:40,461:INFO:              jinja2: 3.1.2
2023-05-06 09:37:40,461:INFO:               scipy: 1.10.0
2023-05-06 09:37:40,461:INFO:              joblib: 1.2.0
2023-05-06 09:37:40,461:INFO:             sklearn: 1.2.1
2023-05-06 09:37:40,461:INFO:                pyod: 1.0.9
2023-05-06 09:37:40,461:INFO:            imblearn: 0.10.1
2023-05-06 09:37:40,461:INFO:   category_encoders: 2.6.0
2023-05-06 09:37:40,461:INFO:            lightgbm: 3.3.5
2023-05-06 09:37:40,461:INFO:               numba: 0.56.4
2023-05-06 09:37:40,461:INFO:            requests: 2.28.1
2023-05-06 09:37:40,461:INFO:          matplotlib: 3.7.0
2023-05-06 09:37:40,461:INFO:          scikitplot: 0.3.7
2023-05-06 09:37:40,461:INFO:         yellowbrick: 1.5
2023-05-06 09:37:40,461:INFO:              plotly: 5.9.0
2023-05-06 09:37:40,461:INFO:             kaleido: 0.2.1
2023-05-06 09:37:40,461:INFO:         statsmodels: 0.13.5
2023-05-06 09:37:40,461:INFO:              sktime: 0.18.0
2023-05-06 09:37:40,461:INFO:               tbats: 1.1.3
2023-05-06 09:37:40,461:INFO:            pmdarima: 2.0.3
2023-05-06 09:37:40,461:INFO:              psutil: 5.9.0
2023-05-06 09:37:40,461:INFO:PyCaret optional dependencies:
2023-05-06 09:37:40,462:INFO:                shap: Not installed
2023-05-06 09:37:40,462:INFO:           interpret: Not installed
2023-05-06 09:37:40,462:INFO:                umap: Not installed
2023-05-06 09:37:40,462:INFO:    pandas_profiling: Not installed
2023-05-06 09:37:40,462:INFO:  explainerdashboard: Not installed
2023-05-06 09:37:40,462:INFO:             autoviz: Not installed
2023-05-06 09:37:40,462:INFO:           fairlearn: Not installed
2023-05-06 09:37:40,462:INFO:             xgboost: Not installed
2023-05-06 09:37:40,462:INFO:            catboost: Not installed
2023-05-06 09:37:40,462:INFO:              kmodes: Not installed
2023-05-06 09:37:40,462:INFO:             mlxtend: Not installed
2023-05-06 09:37:40,462:INFO:       statsforecast: Not installed
2023-05-06 09:37:40,462:INFO:        tune_sklearn: Not installed
2023-05-06 09:37:40,462:INFO:                 ray: Not installed
2023-05-06 09:37:40,462:INFO:            hyperopt: Not installed
2023-05-06 09:37:40,462:INFO:              optuna: Not installed
2023-05-06 09:37:40,462:INFO:               skopt: Not installed
2023-05-06 09:37:40,462:INFO:              mlflow: Not installed
2023-05-06 09:37:40,462:INFO:              gradio: Not installed
2023-05-06 09:37:40,462:INFO:             fastapi: 0.95.1
2023-05-06 09:37:40,462:INFO:             uvicorn: 0.22.0
2023-05-06 09:37:40,463:INFO:              m2cgen: Not installed
2023-05-06 09:37:40,463:INFO:           evidently: Not installed
2023-05-06 09:37:40,463:INFO:               fugue: Not installed
2023-05-06 09:37:40,463:INFO:           streamlit: Not installed
2023-05-06 09:37:40,463:INFO:             prophet: Not installed
2023-05-06 09:37:40,463:INFO:None
2023-05-06 09:37:40,463:INFO:Set up data.
2023-05-06 09:37:40,614:INFO:Set up train/test split.
2023-05-06 09:37:40,685:INFO:Set up index.
2023-05-06 09:37:40,685:INFO:Set up folding strategy.
2023-05-06 09:37:40,685:INFO:Assigning column types.
2023-05-06 09:37:40,685:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-05-06 09:37:40,734:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-05-06 09:37:40,734:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-06 09:37:40,764:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:37:40,764:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:37:40,811:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-05-06 09:37:40,812:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-06 09:37:40,832:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:37:40,832:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:37:40,832:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-05-06 09:37:40,877:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-06 09:37:40,903:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:37:40,903:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:37:40,932:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-06 09:37:40,971:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:37:40,971:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:37:40,972:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-05-06 09:37:41,038:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:37:41,038:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:37:41,107:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:37:41,107:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:37:41,108:INFO:Preparing preprocessing pipeline...
2023-05-06 09:37:41,110:INFO:Set up label encoding.
2023-05-06 09:37:41,110:INFO:Set up simple imputation.
2023-05-06 09:37:41,177:INFO:Set up encoding of ordinal features.
2023-05-06 09:37:41,180:INFO:Set up encoding of categorical features.
2023-05-06 09:43:54,228:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-06 09:43:54,228:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-06 09:43:54,228:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-06 09:43:54,228:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-06 09:43:54,992:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-05-06 09:55:23,306:INFO:PyCaret ClassificationExperiment
2023-05-06 09:55:23,306:INFO:Logging name: clf-default-name
2023-05-06 09:55:23,306:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-05-06 09:55:23,306:INFO:version 3.0.0
2023-05-06 09:55:23,306:INFO:Initializing setup()
2023-05-06 09:55:23,306:INFO:self.USI: 1c33
2023-05-06 09:55:23,306:INFO:self._variable_keys: {'gpu_n_jobs_param', 'y_train', 'gpu_param', 'html_param', 'log_plots_param', 'fold_shuffle_param', 'y_test', 'idx', 'data', 'USI', 'n_jobs_param', 'exp_name_log', 'y', '_ml_usecase', 'X_test', 'logging_param', 'fold_generator', 'X', 'seed', 'target_param', 'X_train', 'fix_imbalance', '_available_plots', 'is_multiclass', 'fold_groups_param', 'memory', 'exp_id', 'pipeline'}
2023-05-06 09:55:23,306:INFO:Checking environment
2023-05-06 09:55:23,306:INFO:python_version: 3.10.9
2023-05-06 09:55:23,306:INFO:python_build: ('main', 'Mar  1 2023 18:18:15')
2023-05-06 09:55:23,306:INFO:machine: AMD64
2023-05-06 09:55:23,306:INFO:platform: Windows-10-10.0.22621-SP0
2023-05-06 09:55:23,306:INFO:Memory: svmem(total=16760946688, available=6210203648, percent=62.9, used=10550743040, free=6210203648)
2023-05-06 09:55:23,307:INFO:Physical Core: 4
2023-05-06 09:55:23,307:INFO:Logical Core: 8
2023-05-06 09:55:23,307:INFO:Checking libraries
2023-05-06 09:55:23,307:INFO:System:
2023-05-06 09:55:23,307:INFO:    python: 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)]
2023-05-06 09:55:23,307:INFO:executable: c:\Users\DELL\anaconda3\python.exe
2023-05-06 09:55:23,307:INFO:   machine: Windows-10-10.0.22621-SP0
2023-05-06 09:55:23,307:INFO:PyCaret required dependencies:
2023-05-06 09:55:23,307:INFO:                 pip: 22.3.1
2023-05-06 09:55:23,307:INFO:          setuptools: 65.6.3
2023-05-06 09:55:23,307:INFO:             pycaret: 3.0.0
2023-05-06 09:55:23,307:INFO:             IPython: 8.10.0
2023-05-06 09:55:23,308:INFO:          ipywidgets: 7.6.5
2023-05-06 09:55:23,308:INFO:                tqdm: 4.64.1
2023-05-06 09:55:23,308:INFO:               numpy: 1.23.5
2023-05-06 09:55:23,308:INFO:              pandas: 1.5.3
2023-05-06 09:55:23,308:INFO:              jinja2: 3.1.2
2023-05-06 09:55:23,308:INFO:               scipy: 1.10.0
2023-05-06 09:55:23,308:INFO:              joblib: 1.2.0
2023-05-06 09:55:23,308:INFO:             sklearn: 1.2.1
2023-05-06 09:55:23,308:INFO:                pyod: 1.0.9
2023-05-06 09:55:23,308:INFO:            imblearn: 0.10.1
2023-05-06 09:55:23,308:INFO:   category_encoders: 2.6.0
2023-05-06 09:55:23,308:INFO:            lightgbm: 3.3.5
2023-05-06 09:55:23,308:INFO:               numba: 0.56.4
2023-05-06 09:55:23,310:INFO:            requests: 2.28.1
2023-05-06 09:55:23,310:INFO:          matplotlib: 3.7.0
2023-05-06 09:55:23,310:INFO:          scikitplot: 0.3.7
2023-05-06 09:55:23,310:INFO:         yellowbrick: 1.5
2023-05-06 09:55:23,310:INFO:              plotly: 5.9.0
2023-05-06 09:55:23,310:INFO:             kaleido: 0.2.1
2023-05-06 09:55:23,310:INFO:         statsmodels: 0.13.5
2023-05-06 09:55:23,310:INFO:              sktime: 0.18.0
2023-05-06 09:55:23,310:INFO:               tbats: 1.1.3
2023-05-06 09:55:23,310:INFO:            pmdarima: 2.0.3
2023-05-06 09:55:23,310:INFO:              psutil: 5.9.0
2023-05-06 09:55:23,310:INFO:PyCaret optional dependencies:
2023-05-06 09:55:23,573:INFO:                shap: Not installed
2023-05-06 09:55:23,573:INFO:           interpret: Not installed
2023-05-06 09:55:23,573:INFO:                umap: Not installed
2023-05-06 09:55:23,573:INFO:    pandas_profiling: Not installed
2023-05-06 09:55:23,573:INFO:  explainerdashboard: Not installed
2023-05-06 09:55:23,573:INFO:             autoviz: Not installed
2023-05-06 09:55:23,573:INFO:           fairlearn: Not installed
2023-05-06 09:55:23,573:INFO:             xgboost: 1.7.5
2023-05-06 09:55:23,573:INFO:            catboost: Not installed
2023-05-06 09:55:23,573:INFO:              kmodes: Not installed
2023-05-06 09:55:23,573:INFO:             mlxtend: Not installed
2023-05-06 09:55:23,573:INFO:       statsforecast: Not installed
2023-05-06 09:55:23,573:INFO:        tune_sklearn: Not installed
2023-05-06 09:55:23,573:INFO:                 ray: Not installed
2023-05-06 09:55:23,573:INFO:            hyperopt: Not installed
2023-05-06 09:55:23,573:INFO:              optuna: Not installed
2023-05-06 09:55:23,573:INFO:               skopt: Not installed
2023-05-06 09:55:23,573:INFO:              mlflow: Not installed
2023-05-06 09:55:23,573:INFO:              gradio: Not installed
2023-05-06 09:55:23,573:INFO:             fastapi: 0.95.1
2023-05-06 09:55:23,573:INFO:             uvicorn: 0.22.0
2023-05-06 09:55:23,573:INFO:              m2cgen: Not installed
2023-05-06 09:55:23,573:INFO:           evidently: Not installed
2023-05-06 09:55:23,573:INFO:               fugue: Not installed
2023-05-06 09:55:23,573:INFO:           streamlit: Not installed
2023-05-06 09:55:23,573:INFO:             prophet: Not installed
2023-05-06 09:55:23,573:INFO:None
2023-05-06 09:55:23,574:INFO:Set up data.
2023-05-06 09:55:23,593:INFO:Set up train/test split.
2023-05-06 09:55:23,625:INFO:Set up index.
2023-05-06 09:55:23,627:INFO:Set up folding strategy.
2023-05-06 09:55:23,627:INFO:Assigning column types.
2023-05-06 09:55:23,631:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-05-06 09:55:23,672:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-05-06 09:55:23,673:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-06 09:55:23,701:INFO:Soft dependency imported: xgboost: 1.7.5
2023-05-06 09:55:23,890:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:55:23,931:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-05-06 09:55:23,932:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-06 09:55:23,965:INFO:Soft dependency imported: xgboost: 1.7.5
2023-05-06 09:55:23,968:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:55:23,968:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-05-06 09:55:24,014:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-06 09:55:24,041:INFO:Soft dependency imported: xgboost: 1.7.5
2023-05-06 09:55:24,045:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:55:24,086:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-06 09:55:24,112:INFO:Soft dependency imported: xgboost: 1.7.5
2023-05-06 09:55:24,115:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:55:24,115:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-05-06 09:55:24,185:INFO:Soft dependency imported: xgboost: 1.7.5
2023-05-06 09:55:24,187:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:55:24,258:INFO:Soft dependency imported: xgboost: 1.7.5
2023-05-06 09:55:24,261:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:55:24,263:INFO:Preparing preprocessing pipeline...
2023-05-06 09:55:24,264:INFO:Set up label encoding.
2023-05-06 09:55:24,264:INFO:Set up simple imputation.
2023-05-06 09:55:24,480:INFO:Finished creating preprocessing pipeline.
2023-05-06 09:55:24,489:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\DELL\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['runtime', 'seasons', 'imdb_score',
                                             'imdb_votes', 'tmdb_popularity',
                                             'tmdb_score'],
                                    transformer=SimpleImput...
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated')))],
         verbose=False)
2023-05-06 09:55:24,489:INFO:Creating final display dataframe.
2023-05-06 09:55:24,943:INFO:Setup _display_container:                     Description  \
0                    Session id   
1                        Target   
2                   Target type   
3                Target mapping   
4           Original data shape   
5        Transformed data shape   
6   Transformed train set shape   
7    Transformed test set shape   
8              Numeric features   
9                    Preprocess   
10              Imputation type   
11           Numeric imputation   
12       Categorical imputation   
13               Fold Generator   
14                  Fold Number   
15                     CPU Jobs   
16                      Use GPU   
17               Log Experiment   
18              Experiment Name   
19                          USI   

                                                Value  
0                                                 123  
1                                          main_genre  
2                                          Multiclass  
3   : 0, action: 1, animation: 2, comedy: 3, crime...  
4                                          (38150, 7)  
5                                         (220814, 7)  
6                                         (154485, 7)  
7                                          (66329, 7)  
8                                                   6  
9                                                True  
10                                             simple  
11                                               mean  
12                                               mode  
13                                    StratifiedKFold  
14                                                 10  
15                                                 -1  
16                                              False  
17                                              False  
18                                   clf-default-name  
19                                               1c33  
2023-05-06 09:55:25,029:INFO:Soft dependency imported: xgboost: 1.7.5
2023-05-06 09:55:25,032:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:55:25,102:INFO:Soft dependency imported: xgboost: 1.7.5
2023-05-06 09:55:25,107:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-06 09:55:25,107:INFO:setup() successfully completed in 1.83s...............
2023-05-06 09:55:41,507:INFO:Initializing compare_models()
2023-05-06 09:55:41,507:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2023-05-06 09:55:41,507:INFO:Checking exceptions
2023-05-06 09:55:41,600:INFO:Preparing display monitor
2023-05-06 09:55:41,648:INFO:Initializing Logistic Regression
2023-05-06 09:55:41,663:INFO:Total runtime is 0.0002606908480326335 minutes
2023-05-06 09:55:41,670:INFO:SubProcess create_model() called ==================================
2023-05-06 09:55:41,670:INFO:Initializing create_model()
2023-05-06 09:55:41,670:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D3EE33100>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 09:55:41,670:INFO:Checking exceptions
2023-05-06 09:55:41,670:INFO:Importing libraries
2023-05-06 09:55:41,670:INFO:Copying training dataset
2023-05-06 09:55:41,933:INFO:Defining folds
2023-05-06 09:55:41,933:INFO:Declaring metric variables
2023-05-06 09:55:41,933:INFO:Importing untrained model
2023-05-06 09:55:41,948:INFO:Logistic Regression Imported successfully
2023-05-06 09:55:41,948:INFO:Starting cross validation
2023-05-06 09:55:41,963:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 09:59:22,327:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-06 09:59:23,005:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 09:59:23,250:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 09:59:23,374:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 09:59:23,501:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 09:59:23,756:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-06 09:59:23,945:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-06 09:59:24,445:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-06 09:59:24,500:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 09:59:24,645:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 09:59:24,783:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 09:59:24,877:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 09:59:24,942:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 09:59:25,001:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 09:59:25,086:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 09:59:25,101:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 09:59:25,260:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 09:59:25,520:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 09:59:25,678:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 09:59:25,794:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 09:59:26,153:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-06 09:59:26,914:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 09:59:27,196:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 09:59:27,335:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 09:59:27,476:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 09:59:29,318:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-06 09:59:29,761:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-06 09:59:29,905:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 09:59:30,111:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 09:59:30,234:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 09:59:30,325:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 09:59:30,341:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 09:59:30,580:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 09:59:30,697:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 09:59:30,797:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 09:59:33,028:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-06 09:59:33,503:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 09:59:33,632:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 09:59:33,725:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 09:59:33,793:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:07,769:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-06 10:01:08,052:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:08,149:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:08,211:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:01:08,257:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:10,105:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-06 10:01:10,384:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:10,493:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:10,542:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:01:10,573:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:10,824:INFO:Calculating mean and std
2023-05-06 10:01:10,824:INFO:Creating metrics dataframe
2023-05-06 10:01:10,920:INFO:Uploading results into container
2023-05-06 10:01:10,920:INFO:Uploading model into container now
2023-05-06 10:01:10,920:INFO:_master_model_container: 1
2023-05-06 10:01:10,920:INFO:_display_container: 2
2023-05-06 10:01:10,920:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-05-06 10:01:10,920:INFO:create_model() successfully completed......................................
2023-05-06 10:01:11,245:INFO:SubProcess create_model() end ==================================
2023-05-06 10:01:11,245:INFO:Creating metrics dataframe
2023-05-06 10:01:11,264:INFO:Initializing K Neighbors Classifier
2023-05-06 10:01:11,264:INFO:Total runtime is 5.493606197834016 minutes
2023-05-06 10:01:11,264:INFO:SubProcess create_model() called ==================================
2023-05-06 10:01:11,264:INFO:Initializing create_model()
2023-05-06 10:01:11,264:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D3EE33100>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 10:01:11,264:INFO:Checking exceptions
2023-05-06 10:01:11,264:INFO:Importing libraries
2023-05-06 10:01:11,264:INFO:Copying training dataset
2023-05-06 10:01:11,435:INFO:Defining folds
2023-05-06 10:01:11,435:INFO:Declaring metric variables
2023-05-06 10:01:11,435:INFO:Importing untrained model
2023-05-06 10:01:11,451:INFO:K Neighbors Classifier Imported successfully
2023-05-06 10:01:11,466:INFO:Starting cross validation
2023-05-06 10:01:11,466:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 10:01:14,675:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:14,701:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:14,716:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:14,720:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:14,800:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:14,800:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:14,803:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:14,837:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:14,845:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:14,875:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:14,879:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:14,883:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:14,924:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:01:14,938:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:01:14,958:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:14,960:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:01:14,965:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:14,967:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:01:14,971:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:15,000:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:15,009:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:15,034:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:15,034:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:15,044:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:15,046:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:01:15,116:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:15,123:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:01:15,129:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:15,135:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:15,197:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:16,956:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:17,003:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:17,058:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:17,109:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:17,156:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:17,205:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:17,455:INFO:Calculating mean and std
2023-05-06 10:01:17,455:INFO:Creating metrics dataframe
2023-05-06 10:01:17,534:INFO:Uploading results into container
2023-05-06 10:01:17,534:INFO:Uploading model into container now
2023-05-06 10:01:17,534:INFO:_master_model_container: 2
2023-05-06 10:01:17,534:INFO:_display_container: 2
2023-05-06 10:01:17,534:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2023-05-06 10:01:17,534:INFO:create_model() successfully completed......................................
2023-05-06 10:01:17,847:INFO:SubProcess create_model() end ==================================
2023-05-06 10:01:17,847:INFO:Creating metrics dataframe
2023-05-06 10:01:17,878:INFO:Initializing Naive Bayes
2023-05-06 10:01:17,878:INFO:Total runtime is 5.603842286268871 minutes
2023-05-06 10:01:17,878:INFO:SubProcess create_model() called ==================================
2023-05-06 10:01:17,878:INFO:Initializing create_model()
2023-05-06 10:01:17,878:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D3EE33100>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 10:01:17,894:INFO:Checking exceptions
2023-05-06 10:01:17,894:INFO:Importing libraries
2023-05-06 10:01:17,894:INFO:Copying training dataset
2023-05-06 10:01:18,068:INFO:Defining folds
2023-05-06 10:01:18,068:INFO:Declaring metric variables
2023-05-06 10:01:18,068:INFO:Importing untrained model
2023-05-06 10:01:18,085:INFO:Naive Bayes Imported successfully
2023-05-06 10:01:18,099:INFO:Starting cross validation
2023-05-06 10:01:18,101:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 10:01:19,391:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:19,391:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:19,423:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:19,438:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:19,454:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:19,470:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:19,470:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:19,485:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:19,564:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:19,564:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:19,595:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:19,611:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:19,611:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:19,642:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:19,642:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:19,642:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:19,642:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:01:19,658:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:01:19,675:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:01:19,690:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:01:19,690:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:01:19,730:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:19,733:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:01:19,733:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:01:19,734:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:01:19,735:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:19,762:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:19,775:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:19,779:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:19,801:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:19,806:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:19,806:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:20,606:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:20,622:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:20,701:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:20,716:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:20,748:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:01:20,764:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:01:20,795:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:20,795:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:21,108:INFO:Calculating mean and std
2023-05-06 10:01:21,111:INFO:Creating metrics dataframe
2023-05-06 10:01:21,296:INFO:Uploading results into container
2023-05-06 10:01:21,312:INFO:Uploading model into container now
2023-05-06 10:01:21,312:INFO:_master_model_container: 3
2023-05-06 10:01:21,312:INFO:_display_container: 2
2023-05-06 10:01:21,312:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2023-05-06 10:01:21,312:INFO:create_model() successfully completed......................................
2023-05-06 10:01:21,579:INFO:SubProcess create_model() end ==================================
2023-05-06 10:01:21,579:INFO:Creating metrics dataframe
2023-05-06 10:01:21,608:INFO:Initializing Decision Tree Classifier
2023-05-06 10:01:21,608:INFO:Total runtime is 5.666008317470552 minutes
2023-05-06 10:01:21,621:INFO:SubProcess create_model() called ==================================
2023-05-06 10:01:21,621:INFO:Initializing create_model()
2023-05-06 10:01:21,624:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D3EE33100>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 10:01:21,624:INFO:Checking exceptions
2023-05-06 10:01:21,624:INFO:Importing libraries
2023-05-06 10:01:21,624:INFO:Copying training dataset
2023-05-06 10:01:21,806:INFO:Defining folds
2023-05-06 10:01:21,806:INFO:Declaring metric variables
2023-05-06 10:01:21,806:INFO:Importing untrained model
2023-05-06 10:01:21,822:INFO:Decision Tree Classifier Imported successfully
2023-05-06 10:01:21,822:INFO:Starting cross validation
2023-05-06 10:01:21,837:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 10:01:23,915:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:23,947:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:23,947:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:23,981:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:23,992:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:24,007:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:24,012:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:24,012:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:24,079:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:24,112:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:24,112:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:24,146:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:24,163:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:24,169:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:24,176:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:24,178:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

 msg_start, len(result))

2023-05-06 10:01:24,197:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:01:24,197:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:01:24,236:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:01:24,246:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:01:24,255:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:24,260:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:01:24,282:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:24,282:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:24,312:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:24,325:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:24,329:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:24,339:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:24,339:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:25,827:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:25,828:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:25,984:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:25,984:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:26,080:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:01:26,125:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:26,137:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:01:26,439:INFO:Calculating mean and std
2023-05-06 10:01:26,439:INFO:Creating metrics dataframe
2023-05-06 10:01:26,598:INFO:Uploading results into container
2023-05-06 10:01:26,598:INFO:Uploading model into container now
2023-05-06 10:01:26,598:INFO:_master_model_container: 4
2023-05-06 10:01:26,598:INFO:_display_container: 2
2023-05-06 10:01:26,598:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=123, splitter='best')
2023-05-06 10:01:26,598:INFO:create_model() successfully completed......................................
2023-05-06 10:01:26,893:INFO:SubProcess create_model() end ==================================
2023-05-06 10:01:26,893:INFO:Creating metrics dataframe
2023-05-06 10:01:26,932:INFO:Initializing SVM - Linear Kernel
2023-05-06 10:01:26,932:INFO:Total runtime is 5.754745093981426 minutes
2023-05-06 10:01:26,941:INFO:SubProcess create_model() called ==================================
2023-05-06 10:01:26,941:INFO:Initializing create_model()
2023-05-06 10:01:26,941:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D3EE33100>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 10:01:26,941:INFO:Checking exceptions
2023-05-06 10:01:26,947:INFO:Importing libraries
2023-05-06 10:01:26,947:INFO:Copying training dataset
2023-05-06 10:01:27,129:INFO:Defining folds
2023-05-06 10:01:27,143:INFO:Declaring metric variables
2023-05-06 10:01:27,147:INFO:Importing untrained model
2023-05-06 10:01:27,147:INFO:SVM - Linear Kernel Imported successfully
2023-05-06 10:01:27,159:INFO:Starting cross validation
2023-05-06 10:01:27,174:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 10:02:26,630:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1236, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-06 10:02:26,911:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:27,474:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1236, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-06 10:02:27,495:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:27,755:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:02:27,777:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:27,903:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:27,998:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1236, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-06 10:02:28,103:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:28,142:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:28,387:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:02:28,538:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:28,584:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1236, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-06 10:02:28,584:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:28,641:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1236, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-06 10:02:28,663:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:28,696:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:02:28,758:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:28,762:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1236, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-06 10:02:28,797:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:28,879:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:28,916:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:29,009:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:29,014:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:02:29,031:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:29,129:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:29,173:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:02:29,188:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:02:29,330:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:29,371:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:29,635:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1236, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-06 10:02:29,838:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:30,522:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:30,852:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:02:31,173:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:31,233:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1236, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-06 10:02:31,568:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:32,250:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:32,639:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:02:32,968:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:43,812:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1236, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-06 10:02:43,858:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:43,971:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:44,059:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:02:44,075:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1236, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-06 10:02:44,138:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:44,141:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:44,250:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:44,311:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:02:44,359:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:44,580:INFO:Calculating mean and std
2023-05-06 10:02:44,580:INFO:Creating metrics dataframe
2023-05-06 10:02:44,785:INFO:Uploading results into container
2023-05-06 10:02:44,785:INFO:Uploading model into container now
2023-05-06 10:02:44,785:INFO:_master_model_container: 5
2023-05-06 10:02:44,785:INFO:_display_container: 2
2023-05-06 10:02:44,791:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2023-05-06 10:02:44,791:INFO:create_model() successfully completed......................................
2023-05-06 10:02:45,117:INFO:SubProcess create_model() end ==================================
2023-05-06 10:02:45,117:INFO:Creating metrics dataframe
2023-05-06 10:02:45,151:INFO:Initializing Ridge Classifier
2023-05-06 10:02:45,151:INFO:Total runtime is 7.058384470144908 minutes
2023-05-06 10:02:45,163:INFO:SubProcess create_model() called ==================================
2023-05-06 10:02:45,163:INFO:Initializing create_model()
2023-05-06 10:02:45,163:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D3EE33100>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 10:02:45,163:INFO:Checking exceptions
2023-05-06 10:02:45,163:INFO:Importing libraries
2023-05-06 10:02:45,163:INFO:Copying training dataset
2023-05-06 10:02:45,354:INFO:Defining folds
2023-05-06 10:02:45,354:INFO:Declaring metric variables
2023-05-06 10:02:45,371:INFO:Importing untrained model
2023-05-06 10:02:45,385:INFO:Ridge Classifier Imported successfully
2023-05-06 10:02:45,392:INFO:Starting cross validation
2023-05-06 10:02:45,392:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 10:02:46,509:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-06 10:02:46,516:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-06 10:02:46,535:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-06 10:02:46,544:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-06 10:02:46,557:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-06 10:02:46,573:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-06 10:02:46,574:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-06 10:02:46,585:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:46,592:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-06 10:02:46,601:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:46,610:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:46,627:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:46,637:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:46,645:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:46,648:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:46,666:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:46,736:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:46,753:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:46,772:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:46,796:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:46,805:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:46,805:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:46,812:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:46,836:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:02:46,852:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:46,852:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:02:46,869:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:02:46,886:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:02:46,894:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:02:46,903:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:02:46,903:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:02:46,909:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:46,924:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:46,939:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:02:46,955:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:46,966:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:46,976:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:46,976:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:46,987:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:47,019:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:47,701:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-06 10:02:47,752:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-06 10:02:47,781:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:47,810:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:47,885:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:47,906:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:47,938:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:02:47,985:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:02:48,004:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:48,036:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:02:48,334:INFO:Calculating mean and std
2023-05-06 10:02:48,334:INFO:Creating metrics dataframe
2023-05-06 10:02:48,416:INFO:Uploading results into container
2023-05-06 10:02:48,416:INFO:Uploading model into container now
2023-05-06 10:02:48,416:INFO:_master_model_container: 6
2023-05-06 10:02:48,416:INFO:_display_container: 2
2023-05-06 10:02:48,416:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2023-05-06 10:02:48,416:INFO:create_model() successfully completed......................................
2023-05-06 10:02:48,684:INFO:SubProcess create_model() end ==================================
2023-05-06 10:02:48,684:INFO:Creating metrics dataframe
2023-05-06 10:02:48,717:INFO:Initializing Random Forest Classifier
2023-05-06 10:02:48,717:INFO:Total runtime is 7.117824117342631 minutes
2023-05-06 10:02:48,717:INFO:SubProcess create_model() called ==================================
2023-05-06 10:02:48,729:INFO:Initializing create_model()
2023-05-06 10:02:48,729:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D3EE33100>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 10:02:48,729:INFO:Checking exceptions
2023-05-06 10:02:48,729:INFO:Importing libraries
2023-05-06 10:02:48,729:INFO:Copying training dataset
2023-05-06 10:02:48,926:INFO:Defining folds
2023-05-06 10:02:48,926:INFO:Declaring metric variables
2023-05-06 10:02:48,928:INFO:Importing untrained model
2023-05-06 10:02:48,942:INFO:Random Forest Classifier Imported successfully
2023-05-06 10:02:48,955:INFO:Starting cross validation
2023-05-06 10:02:48,955:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 10:03:49,552:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:03:49,679:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:03:49,722:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:03:49,804:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:03:49,845:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:03:49,898:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:03:49,946:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:13,441:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.16s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:04:13,447:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.16s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:04:13,529:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.96s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:04:13,605:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.85s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:04:13,784:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.92s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:04:13,889:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.84s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:04:19,605:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:319: UserWarning: Persisting input arguments took 1.46s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-06 10:04:20,139:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:319: UserWarning: Persisting input arguments took 1.38s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-06 10:04:20,349:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:319: UserWarning: Persisting input arguments took 1.05s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-06 10:04:20,405:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:319: UserWarning: Persisting input arguments took 1.23s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-06 10:04:22,433:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:23,428:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:23,469:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:23,699:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:23,948:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:04:24,121:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:24,201:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:24,233:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:24,387:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:24,465:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:24,776:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:24,898:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:25,023:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:25,068:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:25,123:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:25,201:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:04:25,601:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:25,666:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:25,775:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:33,084:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:33,375:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:33,482:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:04:33,538:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:34,144:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:34,301:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:34,391:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:04:34,450:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:34,739:INFO:Calculating mean and std
2023-05-06 10:04:34,742:INFO:Creating metrics dataframe
2023-05-06 10:04:34,879:INFO:Uploading results into container
2023-05-06 10:04:34,881:INFO:Uploading model into container now
2023-05-06 10:04:34,881:INFO:_master_model_container: 7
2023-05-06 10:04:34,881:INFO:_display_container: 2
2023-05-06 10:04:34,882:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2023-05-06 10:04:34,883:INFO:create_model() successfully completed......................................
2023-05-06 10:04:35,261:INFO:SubProcess create_model() end ==================================
2023-05-06 10:04:35,261:INFO:Creating metrics dataframe
2023-05-06 10:04:35,292:INFO:Initializing Quadratic Discriminant Analysis
2023-05-06 10:04:35,293:INFO:Total runtime is 8.894093887011211 minutes
2023-05-06 10:04:35,302:INFO:SubProcess create_model() called ==================================
2023-05-06 10:04:35,303:INFO:Initializing create_model()
2023-05-06 10:04:35,303:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D3EE33100>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 10:04:35,303:INFO:Checking exceptions
2023-05-06 10:04:35,304:INFO:Importing libraries
2023-05-06 10:04:35,304:INFO:Copying training dataset
2023-05-06 10:04:35,561:INFO:Defining folds
2023-05-06 10:04:35,561:INFO:Declaring metric variables
2023-05-06 10:04:35,571:INFO:Importing untrained model
2023-05-06 10:04:35,578:INFO:Quadratic Discriminant Analysis Imported successfully
2023-05-06 10:04:35,595:INFO:Starting cross validation
2023-05-06 10:04:35,598:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 10:04:36,555:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-06 10:04:36,558:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-06 10:04:36,579:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-06 10:04:36,579:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-06 10:04:36,622:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-06 10:04:36,625:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-06 10:04:36,638:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-06 10:04:36,638:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-06 10:04:37,514:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:37,522:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:37,554:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:37,572:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:37,585:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:37,596:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:37,607:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:37,620:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:37,708:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:37,715:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:37,741:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:37,756:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:37,762:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:37,777:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:37,793:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:37,805:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:37,824:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:04:37,824:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:04:37,864:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:04:37,877:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:04:37,921:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:37,923:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:04:37,942:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:04:37,949:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:04:37,965:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:04:37,974:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:37,981:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:38,025:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:38,037:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:38,063:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:38,073:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:38,735:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-06 10:04:38,782:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-06 10:04:39,204:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:39,328:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:39,343:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:39,428:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:04:39,466:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:39,466:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:39,529:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:04:39,580:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:04:39,862:INFO:Calculating mean and std
2023-05-06 10:04:39,862:INFO:Creating metrics dataframe
2023-05-06 10:04:39,939:INFO:Uploading results into container
2023-05-06 10:04:39,955:INFO:Uploading model into container now
2023-05-06 10:04:39,955:INFO:_master_model_container: 8
2023-05-06 10:04:39,955:INFO:_display_container: 2
2023-05-06 10:04:39,955:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2023-05-06 10:04:39,955:INFO:create_model() successfully completed......................................
2023-05-06 10:04:40,227:INFO:SubProcess create_model() end ==================================
2023-05-06 10:04:40,227:INFO:Creating metrics dataframe
2023-05-06 10:04:40,258:INFO:Initializing Ada Boost Classifier
2023-05-06 10:04:40,258:INFO:Total runtime is 8.976839260260265 minutes
2023-05-06 10:04:40,274:INFO:SubProcess create_model() called ==================================
2023-05-06 10:04:40,274:INFO:Initializing create_model()
2023-05-06 10:04:40,274:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D3EE33100>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 10:04:40,274:INFO:Checking exceptions
2023-05-06 10:04:40,274:INFO:Importing libraries
2023-05-06 10:04:40,274:INFO:Copying training dataset
2023-05-06 10:04:40,438:INFO:Defining folds
2023-05-06 10:04:40,438:INFO:Declaring metric variables
2023-05-06 10:04:40,455:INFO:Importing untrained model
2023-05-06 10:04:40,461:INFO:Ada Boost Classifier Imported successfully
2023-05-06 10:04:40,469:INFO:Starting cross validation
2023-05-06 10:04:40,469:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 10:05:08,734:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:05:08,911:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:05:08,954:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:05:08,979:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:05:09,051:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:05:09,081:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:05:09,150:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:05:09,152:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:05:09,195:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:05:09,227:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:05:09,233:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:05:09,284:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:05:09,291:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:05:09,292:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:05:09,320:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:05:09,368:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:05:09,395:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:05:09,411:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:05:09,420:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:05:09,478:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:05:09,479:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:05:09,527:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:05:09,534:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:05:09,551:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:05:09,560:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:05:09,639:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:05:09,688:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:05:09,690:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:05:09,699:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:05:09,773:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:05:09,798:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:05:09,823:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:05:22,495:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:05:22,604:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:05:22,607:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:05:22,662:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:05:22,708:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:05:22,711:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:05:22,761:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:05:22,812:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:05:23,057:INFO:Calculating mean and std
2023-05-06 10:05:23,061:INFO:Creating metrics dataframe
2023-05-06 10:05:23,165:INFO:Uploading results into container
2023-05-06 10:05:23,166:INFO:Uploading model into container now
2023-05-06 10:05:23,167:INFO:_master_model_container: 9
2023-05-06 10:05:23,167:INFO:_display_container: 2
2023-05-06 10:05:23,167:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=123)
2023-05-06 10:05:23,167:INFO:create_model() successfully completed......................................
2023-05-06 10:05:23,422:INFO:SubProcess create_model() end ==================================
2023-05-06 10:05:23,423:INFO:Creating metrics dataframe
2023-05-06 10:05:23,448:INFO:Initializing Gradient Boosting Classifier
2023-05-06 10:05:23,448:INFO:Total runtime is 9.696673285961152 minutes
2023-05-06 10:05:23,454:INFO:SubProcess create_model() called ==================================
2023-05-06 10:05:23,454:INFO:Initializing create_model()
2023-05-06 10:05:23,454:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D3EE33100>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 10:05:23,454:INFO:Checking exceptions
2023-05-06 10:05:23,454:INFO:Importing libraries
2023-05-06 10:05:23,454:INFO:Copying training dataset
2023-05-06 10:05:23,586:INFO:Defining folds
2023-05-06 10:05:23,587:INFO:Declaring metric variables
2023-05-06 10:05:23,591:INFO:Importing untrained model
2023-05-06 10:05:23,596:INFO:Gradient Boosting Classifier Imported successfully
2023-05-06 10:05:23,604:INFO:Starting cross validation
2023-05-06 10:05:23,607:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 10:26:39,896:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 2.85s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:26:44,972:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 3.26s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:26:46,661:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 3.25s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:26:48,604:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 3.33s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:26:50,621:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 3.24s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:26:51,564:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:26:51,754:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:26:51,960:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:26:56,388:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:26:56,635:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:26:56,755:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:26:56,867:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:26:57,963:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:26:58,176:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:26:58,290:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:26:58,418:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:26:59,664:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:26:59,889:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:26:59,999:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:27:00,106:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:27:01,991:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:27:02,218:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:27:02,332:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:27:02,429:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:27:02,498:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 2.89s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:27:05,912:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 2.78s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:27:08,176:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 2.51s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:27:10,134:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:27:10,292:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:27:10,388:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:27:10,465:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:27:12,338:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:27:12,492:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:27:12,643:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:27:13,499:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:27:13,634:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:27:13,715:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:27:13,795:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:21,278:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.22s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:35:22,151:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.28s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:35:25,959:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:26,065:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:26,132:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:35:26,184:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:26,804:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:26,902:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:26,953:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:35:26,996:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:27,239:INFO:Calculating mean and std
2023-05-06 10:35:27,241:INFO:Creating metrics dataframe
2023-05-06 10:35:27,327:INFO:Uploading results into container
2023-05-06 10:35:27,328:INFO:Uploading model into container now
2023-05-06 10:35:27,328:INFO:_master_model_container: 10
2023-05-06 10:35:27,328:INFO:_display_container: 2
2023-05-06 10:35:27,329:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2023-05-06 10:35:27,329:INFO:create_model() successfully completed......................................
2023-05-06 10:35:27,566:INFO:SubProcess create_model() end ==================================
2023-05-06 10:35:27,566:INFO:Creating metrics dataframe
2023-05-06 10:35:27,583:INFO:Initializing Linear Discriminant Analysis
2023-05-06 10:35:27,583:INFO:Total runtime is 39.76558302640915 minutes
2023-05-06 10:35:27,588:INFO:SubProcess create_model() called ==================================
2023-05-06 10:35:27,588:INFO:Initializing create_model()
2023-05-06 10:35:27,589:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D3EE33100>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 10:35:27,589:INFO:Checking exceptions
2023-05-06 10:35:27,589:INFO:Importing libraries
2023-05-06 10:35:27,589:INFO:Copying training dataset
2023-05-06 10:35:27,723:INFO:Defining folds
2023-05-06 10:35:27,724:INFO:Declaring metric variables
2023-05-06 10:35:27,729:INFO:Importing untrained model
2023-05-06 10:35:27,734:INFO:Linear Discriminant Analysis Imported successfully
2023-05-06 10:35:27,744:INFO:Starting cross validation
2023-05-06 10:35:27,746:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 10:35:29,304:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:29,370:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:29,539:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:29,606:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:29,664:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:35:29,731:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:35:29,768:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:29,831:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:31,546:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:31,643:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:31,769:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:31,865:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:31,892:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:35:31,995:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:35:32,001:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:32,104:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:33,913:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:33,964:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:34,136:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:34,197:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:34,255:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:35:34,314:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:35:34,362:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:34,416:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:40,966:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:40,997:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:41,048:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:41,061:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:41,135:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:41,148:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:41,198:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:41,228:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:41,228:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:35:41,250:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:35:41,280:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:35:41,304:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:41,324:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:41,326:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:35:41,345:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:41,397:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:35:42,091:INFO:Calculating mean and std
2023-05-06 10:35:42,093:INFO:Creating metrics dataframe
2023-05-06 10:35:42,203:INFO:Uploading results into container
2023-05-06 10:35:42,204:INFO:Uploading model into container now
2023-05-06 10:35:42,204:INFO:_master_model_container: 11
2023-05-06 10:35:42,205:INFO:_display_container: 2
2023-05-06 10:35:42,206:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2023-05-06 10:35:42,206:INFO:create_model() successfully completed......................................
2023-05-06 10:35:42,454:INFO:SubProcess create_model() end ==================================
2023-05-06 10:35:42,454:INFO:Creating metrics dataframe
2023-05-06 10:35:42,473:INFO:Initializing Extra Trees Classifier
2023-05-06 10:35:42,473:INFO:Total runtime is 40.01374907096228 minutes
2023-05-06 10:35:42,480:INFO:SubProcess create_model() called ==================================
2023-05-06 10:35:42,481:INFO:Initializing create_model()
2023-05-06 10:35:42,481:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D3EE33100>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 10:35:42,481:INFO:Checking exceptions
2023-05-06 10:35:42,481:INFO:Importing libraries
2023-05-06 10:35:42,481:INFO:Copying training dataset
2023-05-06 10:35:42,659:INFO:Defining folds
2023-05-06 10:35:42,659:INFO:Declaring metric variables
2023-05-06 10:35:42,664:INFO:Importing untrained model
2023-05-06 10:35:42,670:INFO:Extra Trees Classifier Imported successfully
2023-05-06 10:35:42,683:INFO:Starting cross validation
2023-05-06 10:35:42,685:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 10:36:18,809:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.53s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:36:19,788:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.84s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:36:21,003:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.97s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:36:21,161:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.01s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:36:21,217:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.01s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:36:21,416:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.84s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:36:21,438:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:36:21,864:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:36:22,344:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:36:22,899:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 1.03s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-06 10:36:23,097:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:36:23,677:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:36:23,941:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:36:24,103:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:36:24,344:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:36:24,373:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:36:24,768:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:36:24,785:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:36:24,878:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:36:25,006:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:36:25,009:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:36:25,155:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:36:25,187:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:36:25,196:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:36:25,285:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:36:25,582:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:36:25,758:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:36:25,869:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:36:26,129:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:36:40,286:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.74s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:36:41,504:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.79s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:36:42,994:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.22s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:36:43,103:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:36:43,645:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:36:43,845:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:36:44,003:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:36:46,134:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:36:46,572:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:36:46,746:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:36:46,901:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:36:47,081:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:36:47,329:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:36:47,515:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:36:47,642:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:36:50,941:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:36:51,053:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:36:51,108:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:36:51,157:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:36:51,412:INFO:Calculating mean and std
2023-05-06 10:36:51,414:INFO:Creating metrics dataframe
2023-05-06 10:36:51,526:INFO:Uploading results into container
2023-05-06 10:36:51,527:INFO:Uploading model into container now
2023-05-06 10:36:51,528:INFO:_master_model_container: 12
2023-05-06 10:36:51,528:INFO:_display_container: 2
2023-05-06 10:36:51,530:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=123, verbose=0, warm_start=False)
2023-05-06 10:36:51,530:INFO:create_model() successfully completed......................................
2023-05-06 10:36:51,804:INFO:SubProcess create_model() end ==================================
2023-05-06 10:36:51,804:INFO:Creating metrics dataframe
2023-05-06 10:36:51,834:INFO:Initializing Extreme Gradient Boosting
2023-05-06 10:36:51,834:INFO:Total runtime is 41.169778708616896 minutes
2023-05-06 10:36:51,840:INFO:SubProcess create_model() called ==================================
2023-05-06 10:36:51,840:INFO:Initializing create_model()
2023-05-06 10:36:51,840:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D3EE33100>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 10:36:51,840:INFO:Checking exceptions
2023-05-06 10:36:51,840:INFO:Importing libraries
2023-05-06 10:36:51,840:INFO:Copying training dataset
2023-05-06 10:36:51,959:INFO:Defining folds
2023-05-06 10:36:51,959:INFO:Declaring metric variables
2023-05-06 10:36:51,963:INFO:Importing untrained model
2023-05-06 10:36:51,969:INFO:Extreme Gradient Boosting Imported successfully
2023-05-06 10:36:51,975:INFO:Starting cross validation
2023-05-06 10:36:51,977:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 10:44:30,639:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:44:30,900:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:44:31,143:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:44:38,181:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:44:38,424:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:44:38,626:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:44:41,378:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:44:41,592:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:44:41,799:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:44:41,907:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:44:42,126:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:44:42,236:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:44:42,256:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:44:42,345:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:44:42,515:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:44:42,754:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:44:43,160:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:44:43,359:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:44:43,564:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:44:47,002:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:44:47,096:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:44:47,158:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:44:47,242:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:44:47,291:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:44:47,375:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:47:26,567:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:47:26,687:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:47:26,786:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:47:29,126:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:47:29,199:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:47:29,270:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:47:29,477:INFO:Calculating mean and std
2023-05-06 10:47:29,479:INFO:Creating metrics dataframe
2023-05-06 10:47:29,559:INFO:Uploading results into container
2023-05-06 10:47:29,560:INFO:Uploading model into container now
2023-05-06 10:47:29,560:INFO:_master_model_container: 13
2023-05-06 10:47:29,560:INFO:_display_container: 2
2023-05-06 10:47:29,563:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              n_estimators=100, n_jobs=-1, num_parallel_tree=None,
              objective='binary:logistic', predictor=None, ...)
2023-05-06 10:47:29,564:INFO:create_model() successfully completed......................................
2023-05-06 10:47:29,810:INFO:SubProcess create_model() end ==================================
2023-05-06 10:47:29,811:INFO:Creating metrics dataframe
2023-05-06 10:47:29,843:INFO:Initializing Light Gradient Boosting Machine
2023-05-06 10:47:29,843:INFO:Total runtime is 51.80325864156087 minutes
2023-05-06 10:47:29,850:INFO:SubProcess create_model() called ==================================
2023-05-06 10:47:29,850:INFO:Initializing create_model()
2023-05-06 10:47:29,850:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D3EE33100>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 10:47:29,851:INFO:Checking exceptions
2023-05-06 10:47:29,851:INFO:Importing libraries
2023-05-06 10:47:29,851:INFO:Copying training dataset
2023-05-06 10:47:29,975:INFO:Defining folds
2023-05-06 10:47:29,975:INFO:Declaring metric variables
2023-05-06 10:47:29,982:INFO:Importing untrained model
2023-05-06 10:47:29,986:INFO:Light Gradient Boosting Machine Imported successfully
2023-05-06 10:47:29,993:INFO:Starting cross validation
2023-05-06 10:47:29,994:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 10:48:19,818:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.19s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:48:21,052:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.40s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:48:21,847:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.38s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:48:22,060:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.34s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:48:22,068:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.31s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:48:22,201:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.25s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:48:23,793:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.43s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:48:24,941:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.39s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:49:00,005:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:00,258:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:00,512:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:05,590:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:05,797:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:06,010:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:06,697:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:06,891:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:06,972:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:49:07,043:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:08,072:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:08,213:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:08,288:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:49:08,353:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:09,163:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:09,294:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:09,330:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:09,415:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:09,448:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:09,511:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:49:09,567:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:09,611:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:09,715:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:09,733:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:09,795:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:49:09,834:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:09,853:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:09,931:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:31,095:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:31,163:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:31,240:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:32,335:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:32,409:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:32,482:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:32,689:INFO:Calculating mean and std
2023-05-06 10:49:32,690:INFO:Creating metrics dataframe
2023-05-06 10:49:32,770:INFO:Uploading results into container
2023-05-06 10:49:32,771:INFO:Uploading model into container now
2023-05-06 10:49:32,771:INFO:_master_model_container: 14
2023-05-06 10:49:32,772:INFO:_display_container: 2
2023-05-06 10:49:32,772:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2023-05-06 10:49:32,772:INFO:create_model() successfully completed......................................
2023-05-06 10:49:33,017:INFO:SubProcess create_model() end ==================================
2023-05-06 10:49:33,017:INFO:Creating metrics dataframe
2023-05-06 10:49:33,042:INFO:Initializing Dummy Classifier
2023-05-06 10:49:33,042:INFO:Total runtime is 53.85657083590826 minutes
2023-05-06 10:49:33,048:INFO:SubProcess create_model() called ==================================
2023-05-06 10:49:33,049:INFO:Initializing create_model()
2023-05-06 10:49:33,049:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D3EE33100>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 10:49:33,050:INFO:Checking exceptions
2023-05-06 10:49:33,050:INFO:Importing libraries
2023-05-06 10:49:33,050:INFO:Copying training dataset
2023-05-06 10:49:33,176:INFO:Defining folds
2023-05-06 10:49:33,176:INFO:Declaring metric variables
2023-05-06 10:49:33,181:INFO:Importing untrained model
2023-05-06 10:49:33,185:INFO:Dummy Classifier Imported successfully
2023-05-06 10:49:33,193:INFO:Starting cross validation
2023-05-06 10:49:33,193:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 10:49:33,903:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:33,910:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:33,937:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:33,946:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:33,953:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:33,981:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:33,991:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:33,992:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:34,053:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:34,058:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:34,083:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:34,089:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:34,098:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:34,123:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:34,131:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:49:34,134:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:34,138:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:49:34,143:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:34,159:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:49:34,164:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:49:34,176:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:49:34,197:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:49:34,198:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:34,203:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:34,210:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:49:34,222:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:49:34,227:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:34,230:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:34,244:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:34,264:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:34,278:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:34,287:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:34,934:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:34,995:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:35,022:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:35,071:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:49:35,086:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:35,114:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:35,142:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:49:35,195:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:49:35,503:INFO:Calculating mean and std
2023-05-06 10:49:35,504:INFO:Creating metrics dataframe
2023-05-06 10:49:35,590:INFO:Uploading results into container
2023-05-06 10:49:35,591:INFO:Uploading model into container now
2023-05-06 10:49:35,591:INFO:_master_model_container: 15
2023-05-06 10:49:35,592:INFO:_display_container: 2
2023-05-06 10:49:35,592:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2023-05-06 10:49:35,592:INFO:create_model() successfully completed......................................
2023-05-06 10:49:35,809:INFO:SubProcess create_model() end ==================================
2023-05-06 10:49:35,809:INFO:Creating metrics dataframe
2023-05-06 10:49:35,844:INFO:Initializing create_model()
2023-05-06 10:49:35,844:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-05-06 10:49:35,844:INFO:Checking exceptions
2023-05-06 10:49:35,850:INFO:Importing libraries
2023-05-06 10:49:35,850:INFO:Copying training dataset
2023-05-06 10:49:35,972:INFO:Defining folds
2023-05-06 10:49:35,972:INFO:Declaring metric variables
2023-05-06 10:49:35,972:INFO:Importing untrained model
2023-05-06 10:49:35,973:INFO:Declaring custom model
2023-05-06 10:49:35,973:INFO:Random Forest Classifier Imported successfully
2023-05-06 10:49:35,974:INFO:Cross validation set to False
2023-05-06 10:49:35,974:INFO:Fitting Model
2023-05-06 10:49:45,610:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2023-05-06 10:49:45,610:INFO:create_model() successfully completed......................................
2023-05-06 10:49:45,900:INFO:_master_model_container: 15
2023-05-06 10:49:45,901:INFO:_display_container: 2
2023-05-06 10:49:45,901:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2023-05-06 10:49:45,902:INFO:compare_models() successfully completed......................................
2023-05-06 10:49:45,902:INFO:Initializing compare_models()
2023-05-06 10:49:45,903:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2023-05-06 10:49:45,903:INFO:Checking exceptions
2023-05-06 10:49:45,952:INFO:Preparing display monitor
2023-05-06 10:49:45,984:INFO:Initializing Logistic Regression
2023-05-06 10:49:45,984:INFO:Total runtime is 0.0 minutes
2023-05-06 10:49:45,989:INFO:SubProcess create_model() called ==================================
2023-05-06 10:49:45,989:INFO:Initializing create_model()
2023-05-06 10:49:45,990:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D4267D120>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 10:49:45,990:INFO:Checking exceptions
2023-05-06 10:49:45,990:INFO:Importing libraries
2023-05-06 10:49:45,990:INFO:Copying training dataset
2023-05-06 10:49:46,175:INFO:Defining folds
2023-05-06 10:49:46,175:INFO:Declaring metric variables
2023-05-06 10:49:46,179:INFO:Importing untrained model
2023-05-06 10:49:46,183:INFO:Logistic Regression Imported successfully
2023-05-06 10:49:46,191:INFO:Starting cross validation
2023-05-06 10:49:46,193:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 10:53:50,292:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-06 10:53:51,053:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:53:51,128:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-06 10:53:51,271:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:53:51,387:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:53:51,487:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:53:51,726:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:53:51,962:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:53:52,052:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-06 10:53:52,087:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:53:52,199:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:53:52,942:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:53:53,487:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-06 10:53:53,639:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:53:53,806:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:53:53,957:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:53:54,411:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:53:54,447:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-06 10:53:54,636:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:53:54,819:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:53:55,092:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:53:55,871:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:53:55,974:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-06 10:53:56,064:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:53:56,170:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:53:56,262:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:53:56,563:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:53:56,768:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:53:56,881:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:53:56,973:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:53:57,291:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-06 10:53:57,833:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:53:57,991:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:53:58,091:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:53:58,198:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:54:01,867:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-06 10:54:02,202:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:54:02,323:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:54:02,389:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:54:02,443:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:20,888:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-06 10:55:21,125:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:21,213:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:21,259:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:55:21,300:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:23,179:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-06 10:55:23,362:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:23,431:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:23,468:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:55:23,501:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:23,698:INFO:Calculating mean and std
2023-05-06 10:55:23,698:INFO:Creating metrics dataframe
2023-05-06 10:55:23,779:INFO:Uploading results into container
2023-05-06 10:55:23,780:INFO:Uploading model into container now
2023-05-06 10:55:23,780:INFO:_master_model_container: 16
2023-05-06 10:55:23,780:INFO:_display_container: 3
2023-05-06 10:55:23,781:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-05-06 10:55:23,781:INFO:create_model() successfully completed......................................
2023-05-06 10:55:24,008:INFO:SubProcess create_model() end ==================================
2023-05-06 10:55:24,009:INFO:Creating metrics dataframe
2023-05-06 10:55:24,024:INFO:Initializing K Neighbors Classifier
2023-05-06 10:55:24,024:INFO:Total runtime is 5.633997690677643 minutes
2023-05-06 10:55:24,029:INFO:SubProcess create_model() called ==================================
2023-05-06 10:55:24,030:INFO:Initializing create_model()
2023-05-06 10:55:24,030:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D4267D120>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 10:55:24,030:INFO:Checking exceptions
2023-05-06 10:55:24,031:INFO:Importing libraries
2023-05-06 10:55:24,031:INFO:Copying training dataset
2023-05-06 10:55:24,144:INFO:Defining folds
2023-05-06 10:55:24,145:INFO:Declaring metric variables
2023-05-06 10:55:24,147:INFO:Importing untrained model
2023-05-06 10:55:24,153:INFO:K Neighbors Classifier Imported successfully
2023-05-06 10:55:24,160:INFO:Starting cross validation
2023-05-06 10:55:24,161:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 10:55:27,442:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:27,475:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:27,573:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:27,595:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:27,624:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:27,643:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:27,647:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:27,681:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:27,692:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:27,706:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:27,763:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:55:27,798:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:27,815:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:27,822:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:55:27,846:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:27,870:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:27,875:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:27,905:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:27,932:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:27,939:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:55:27,943:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:27,971:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:55:28,024:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:55:28,024:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:28,042:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:28,053:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:55:28,078:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:28,106:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:28,125:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:28,160:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:29,919:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:29,931:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:30,021:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:30,036:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:30,113:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:30,130:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:30,447:INFO:Calculating mean and std
2023-05-06 10:55:30,451:INFO:Creating metrics dataframe
2023-05-06 10:55:30,548:INFO:Uploading results into container
2023-05-06 10:55:30,549:INFO:Uploading model into container now
2023-05-06 10:55:30,550:INFO:_master_model_container: 17
2023-05-06 10:55:30,550:INFO:_display_container: 3
2023-05-06 10:55:30,550:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2023-05-06 10:55:30,550:INFO:create_model() successfully completed......................................
2023-05-06 10:55:30,761:INFO:SubProcess create_model() end ==================================
2023-05-06 10:55:30,761:INFO:Creating metrics dataframe
2023-05-06 10:55:30,781:INFO:Initializing Naive Bayes
2023-05-06 10:55:30,781:INFO:Total runtime is 5.746608416239421 minutes
2023-05-06 10:55:30,786:INFO:SubProcess create_model() called ==================================
2023-05-06 10:55:30,787:INFO:Initializing create_model()
2023-05-06 10:55:30,787:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D4267D120>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 10:55:30,787:INFO:Checking exceptions
2023-05-06 10:55:30,787:INFO:Importing libraries
2023-05-06 10:55:30,787:INFO:Copying training dataset
2023-05-06 10:55:30,904:INFO:Defining folds
2023-05-06 10:55:30,905:INFO:Declaring metric variables
2023-05-06 10:55:30,908:INFO:Importing untrained model
2023-05-06 10:55:30,913:INFO:Naive Bayes Imported successfully
2023-05-06 10:55:30,920:INFO:Starting cross validation
2023-05-06 10:55:30,922:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 10:55:31,981:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:32,047:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:32,064:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:32,119:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:32,125:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:32,152:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:32,157:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:32,164:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:32,198:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:32,261:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:32,286:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:32,321:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:55:32,338:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:32,345:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:32,366:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:32,372:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:32,375:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:55:32,384:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:32,402:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:55:32,421:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:32,453:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:55:32,461:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:55:32,472:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:32,482:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:55:32,483:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:55:32,501:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:32,503:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:55:32,550:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:32,560:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:32,578:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:32,578:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:32,602:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:33,504:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:33,526:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:33,616:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:33,633:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:33,676:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:55:33,689:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:55:33,732:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:33,737:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:34,085:INFO:Calculating mean and std
2023-05-06 10:55:34,088:INFO:Creating metrics dataframe
2023-05-06 10:55:34,196:INFO:Uploading results into container
2023-05-06 10:55:34,197:INFO:Uploading model into container now
2023-05-06 10:55:34,198:INFO:_master_model_container: 18
2023-05-06 10:55:34,198:INFO:_display_container: 3
2023-05-06 10:55:34,198:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2023-05-06 10:55:34,198:INFO:create_model() successfully completed......................................
2023-05-06 10:55:34,408:INFO:SubProcess create_model() end ==================================
2023-05-06 10:55:34,408:INFO:Creating metrics dataframe
2023-05-06 10:55:34,425:INFO:Initializing Decision Tree Classifier
2023-05-06 10:55:34,426:INFO:Total runtime is 5.807374644279481 minutes
2023-05-06 10:55:34,431:INFO:SubProcess create_model() called ==================================
2023-05-06 10:55:34,432:INFO:Initializing create_model()
2023-05-06 10:55:34,432:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D4267D120>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 10:55:34,432:INFO:Checking exceptions
2023-05-06 10:55:34,432:INFO:Importing libraries
2023-05-06 10:55:34,433:INFO:Copying training dataset
2023-05-06 10:55:34,552:INFO:Defining folds
2023-05-06 10:55:34,552:INFO:Declaring metric variables
2023-05-06 10:55:34,556:INFO:Importing untrained model
2023-05-06 10:55:34,561:INFO:Decision Tree Classifier Imported successfully
2023-05-06 10:55:34,568:INFO:Starting cross validation
2023-05-06 10:55:34,569:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 10:55:36,670:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:36,689:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:36,741:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:36,770:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:36,775:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:36,783:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:36,790:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:36,794:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:36,902:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:36,916:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:36,956:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:36,985:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:36,999:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:37,009:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:37,011:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:37,015:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:37,021:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:55:37,035:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:55:37,100:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:55:37,118:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:55:37,124:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:37,127:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:55:37,136:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:37,137:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:55:37,174:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:37,203:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:37,225:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:37,235:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:37,236:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:37,240:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:38,767:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:38,802:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:38,859:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:38,898:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:38,946:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:55:38,951:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:38,989:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:55:39,284:INFO:Calculating mean and std
2023-05-06 10:55:39,288:INFO:Creating metrics dataframe
2023-05-06 10:55:39,391:INFO:Uploading results into container
2023-05-06 10:55:39,391:INFO:Uploading model into container now
2023-05-06 10:55:39,392:INFO:_master_model_container: 19
2023-05-06 10:55:39,392:INFO:_display_container: 3
2023-05-06 10:55:39,392:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=123, splitter='best')
2023-05-06 10:55:39,393:INFO:create_model() successfully completed......................................
2023-05-06 10:55:39,600:INFO:SubProcess create_model() end ==================================
2023-05-06 10:55:39,600:INFO:Creating metrics dataframe
2023-05-06 10:55:39,620:INFO:Initializing SVM - Linear Kernel
2023-05-06 10:55:39,620:INFO:Total runtime is 5.8939391613006595 minutes
2023-05-06 10:55:39,625:INFO:SubProcess create_model() called ==================================
2023-05-06 10:55:39,626:INFO:Initializing create_model()
2023-05-06 10:55:39,626:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D4267D120>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 10:55:39,626:INFO:Checking exceptions
2023-05-06 10:55:39,626:INFO:Importing libraries
2023-05-06 10:55:39,626:INFO:Copying training dataset
2023-05-06 10:55:39,749:INFO:Defining folds
2023-05-06 10:55:39,749:INFO:Declaring metric variables
2023-05-06 10:55:39,754:INFO:Importing untrained model
2023-05-06 10:55:39,758:INFO:SVM - Linear Kernel Imported successfully
2023-05-06 10:55:39,766:INFO:Starting cross validation
2023-05-06 10:55:39,766:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 10:56:25,308:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1236, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-06 10:56:25,414:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1236, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-06 10:56:25,423:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:25,540:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:25,578:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:25,604:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:56:25,667:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:25,824:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:25,969:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:56:26,060:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:26,133:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1236, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-06 10:56:26,200:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:26,359:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:26,436:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:56:26,593:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:26,898:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1236, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-06 10:56:26,989:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1236, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-06 10:56:27,050:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:27,119:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:27,339:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:27,434:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:27,473:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:56:27,560:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:27,567:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:56:27,705:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:28,696:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1236, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-06 10:56:28,856:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:29,284:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:29,481:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:56:29,599:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:31,142:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1236, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-06 10:56:31,257:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:31,691:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:31,916:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:56:32,028:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1236, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-06 10:56:32,162:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:32,211:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:32,576:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:32,867:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:56:33,077:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:38,283:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1236, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-06 10:56:38,318:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1236, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-06 10:56:38,324:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:38,361:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:38,432:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:38,476:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:38,495:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:56:38,542:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:56:38,548:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:38,597:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:38,959:INFO:Calculating mean and std
2023-05-06 10:56:38,961:INFO:Creating metrics dataframe
2023-05-06 10:56:39,054:INFO:Uploading results into container
2023-05-06 10:56:39,055:INFO:Uploading model into container now
2023-05-06 10:56:39,056:INFO:_master_model_container: 20
2023-05-06 10:56:39,056:INFO:_display_container: 3
2023-05-06 10:56:39,056:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2023-05-06 10:56:39,056:INFO:create_model() successfully completed......................................
2023-05-06 10:56:39,273:INFO:SubProcess create_model() end ==================================
2023-05-06 10:56:39,273:INFO:Creating metrics dataframe
2023-05-06 10:56:39,294:INFO:Initializing Ridge Classifier
2023-05-06 10:56:39,294:INFO:Total runtime is 6.888505907853444 minutes
2023-05-06 10:56:39,299:INFO:SubProcess create_model() called ==================================
2023-05-06 10:56:39,299:INFO:Initializing create_model()
2023-05-06 10:56:39,299:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D4267D120>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 10:56:39,299:INFO:Checking exceptions
2023-05-06 10:56:39,299:INFO:Importing libraries
2023-05-06 10:56:39,299:INFO:Copying training dataset
2023-05-06 10:56:39,419:INFO:Defining folds
2023-05-06 10:56:39,419:INFO:Declaring metric variables
2023-05-06 10:56:39,423:INFO:Importing untrained model
2023-05-06 10:56:39,428:INFO:Ridge Classifier Imported successfully
2023-05-06 10:56:39,436:INFO:Starting cross validation
2023-05-06 10:56:39,437:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 10:56:40,394:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-06 10:56:40,454:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-06 10:56:40,487:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:40,542:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-06 10:56:40,549:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-06 10:56:40,557:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-06 10:56:40,559:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:40,565:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-06 10:56:40,569:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-06 10:56:40,588:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-06 10:56:40,643:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:40,651:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:40,658:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:40,667:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:40,671:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:40,687:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:40,702:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:40,777:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:40,824:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:56:40,859:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:40,860:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:40,879:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:40,886:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:40,892:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:40,893:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:56:40,915:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:40,923:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:40,971:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:56:40,971:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:56:40,991:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:40,996:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:56:41,010:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:56:41,021:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:56:41,031:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:56:41,072:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:41,073:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:41,098:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:41,113:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:41,117:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:41,132:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:42,007:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-06 10:56:42,019:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-06 10:56:42,064:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:42,076:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:42,183:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:42,210:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:42,244:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:56:42,276:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:56:42,291:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:42,323:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:56:42,738:INFO:Calculating mean and std
2023-05-06 10:56:42,740:INFO:Creating metrics dataframe
2023-05-06 10:56:42,837:INFO:Uploading results into container
2023-05-06 10:56:42,838:INFO:Uploading model into container now
2023-05-06 10:56:42,839:INFO:_master_model_container: 21
2023-05-06 10:56:42,839:INFO:_display_container: 3
2023-05-06 10:56:42,839:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2023-05-06 10:56:42,839:INFO:create_model() successfully completed......................................
2023-05-06 10:56:43,052:INFO:SubProcess create_model() end ==================================
2023-05-06 10:56:43,052:INFO:Creating metrics dataframe
2023-05-06 10:56:43,074:INFO:Initializing Random Forest Classifier
2023-05-06 10:56:43,074:INFO:Total runtime is 6.951495703061422 minutes
2023-05-06 10:56:43,079:INFO:SubProcess create_model() called ==================================
2023-05-06 10:56:43,079:INFO:Initializing create_model()
2023-05-06 10:56:43,079:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D4267D120>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 10:56:43,079:INFO:Checking exceptions
2023-05-06 10:56:43,079:INFO:Importing libraries
2023-05-06 10:56:43,079:INFO:Copying training dataset
2023-05-06 10:56:43,225:INFO:Defining folds
2023-05-06 10:56:43,225:INFO:Declaring metric variables
2023-05-06 10:56:43,228:INFO:Importing untrained model
2023-05-06 10:56:43,233:INFO:Random Forest Classifier Imported successfully
2023-05-06 10:56:43,240:INFO:Starting cross validation
2023-05-06 10:56:43,242:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 10:57:28,798:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 2.43s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-06 10:57:33,384:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:57:33,532:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:57:33,675:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:57:36,589:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.89s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:57:37,977:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.77s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:57:38,549:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.05s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:57:38,635:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.09s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:57:38,718:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.10s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:57:38,718:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.12s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 10:57:40,347:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 0.81s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-06 10:57:40,714:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 1.00s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-06 10:57:40,834:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 1.19s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-06 10:57:40,836:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 1.12s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-06 10:57:40,898:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 1.13s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-06 10:57:41,987:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:57:43,014:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:57:43,297:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:57:43,543:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:57:43,608:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:57:43,997:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:57:44,930:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:57:45,775:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:57:45,947:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:57:46,140:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:57:46,436:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:57:46,472:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:57:46,648:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:57:46,737:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:57:46,862:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:57:47,080:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:57:47,107:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:57:47,148:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:57:47,246:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:57:47,390:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:57:47,441:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:57:47,456:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:57:47,650:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:57:47,799:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:57:53,796:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:57:54,026:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:57:54,141:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:57:54,248:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:57:58,321:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:57:58,412:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:57:58,457:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:57:58,497:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:57:58,716:INFO:Calculating mean and std
2023-05-06 10:57:58,718:INFO:Creating metrics dataframe
2023-05-06 10:57:58,805:INFO:Uploading results into container
2023-05-06 10:57:58,805:INFO:Uploading model into container now
2023-05-06 10:57:58,806:INFO:_master_model_container: 22
2023-05-06 10:57:58,806:INFO:_display_container: 3
2023-05-06 10:57:58,809:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2023-05-06 10:57:58,809:INFO:create_model() successfully completed......................................
2023-05-06 10:57:59,069:INFO:SubProcess create_model() end ==================================
2023-05-06 10:57:59,069:INFO:Creating metrics dataframe
2023-05-06 10:57:59,090:INFO:Initializing Quadratic Discriminant Analysis
2023-05-06 10:57:59,091:INFO:Total runtime is 8.218448722362519 minutes
2023-05-06 10:57:59,100:INFO:SubProcess create_model() called ==================================
2023-05-06 10:57:59,100:INFO:Initializing create_model()
2023-05-06 10:57:59,100:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D4267D120>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 10:57:59,100:INFO:Checking exceptions
2023-05-06 10:57:59,100:INFO:Importing libraries
2023-05-06 10:57:59,100:INFO:Copying training dataset
2023-05-06 10:57:59,224:INFO:Defining folds
2023-05-06 10:57:59,224:INFO:Declaring metric variables
2023-05-06 10:57:59,232:INFO:Importing untrained model
2023-05-06 10:57:59,237:INFO:Quadratic Discriminant Analysis Imported successfully
2023-05-06 10:57:59,245:INFO:Starting cross validation
2023-05-06 10:57:59,246:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 10:57:59,767:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-06 10:57:59,769:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-06 10:57:59,821:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-06 10:57:59,834:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-06 10:57:59,838:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-06 10:57:59,873:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-06 10:57:59,883:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-06 10:57:59,889:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-06 10:58:00,500:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:00,508:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:00,572:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:00,578:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:00,608:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:00,624:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:00,624:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:00,645:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:00,717:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:00,717:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:00,789:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:00,803:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:00,828:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:00,838:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:58:00,847:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:58:00,848:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:00,854:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:00,869:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:00,904:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:58:00,931:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:58:00,939:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:00,945:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:58:00,948:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:00,966:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:58:00,972:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:58:00,988:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:58:01,005:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:01,033:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:01,049:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:01,068:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:01,089:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:01,092:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:01,817:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-06 10:58:01,824:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-06 10:58:02,188:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:02,216:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:02,309:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:02,353:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:02,365:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:58:02,410:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:58:02,412:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:02,472:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:02,797:INFO:Calculating mean and std
2023-05-06 10:58:02,801:INFO:Creating metrics dataframe
2023-05-06 10:58:02,911:INFO:Uploading results into container
2023-05-06 10:58:02,913:INFO:Uploading model into container now
2023-05-06 10:58:02,914:INFO:_master_model_container: 23
2023-05-06 10:58:02,914:INFO:_display_container: 3
2023-05-06 10:58:02,915:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2023-05-06 10:58:02,915:INFO:create_model() successfully completed......................................
2023-05-06 10:58:03,148:INFO:SubProcess create_model() end ==================================
2023-05-06 10:58:03,148:INFO:Creating metrics dataframe
2023-05-06 10:58:03,171:INFO:Initializing Ada Boost Classifier
2023-05-06 10:58:03,172:INFO:Total runtime is 8.286468048890432 minutes
2023-05-06 10:58:03,177:INFO:SubProcess create_model() called ==================================
2023-05-06 10:58:03,178:INFO:Initializing create_model()
2023-05-06 10:58:03,178:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D4267D120>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 10:58:03,178:INFO:Checking exceptions
2023-05-06 10:58:03,178:INFO:Importing libraries
2023-05-06 10:58:03,178:INFO:Copying training dataset
2023-05-06 10:58:03,303:INFO:Defining folds
2023-05-06 10:58:03,303:INFO:Declaring metric variables
2023-05-06 10:58:03,307:INFO:Importing untrained model
2023-05-06 10:58:03,311:INFO:Ada Boost Classifier Imported successfully
2023-05-06 10:58:03,322:INFO:Starting cross validation
2023-05-06 10:58:03,324:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 10:58:31,166:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:31,368:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:31,480:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:58:31,572:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:31,660:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:31,678:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:31,722:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:31,745:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:31,855:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:31,885:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:31,887:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:31,966:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:31,970:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:31,992:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:32,006:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:58:32,009:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:58:32,087:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:58:32,087:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:32,091:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:58:32,114:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:32,127:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:32,130:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:32,193:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:32,200:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:32,245:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:32,247:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:58:32,320:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:32,345:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:32,365:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:58:32,441:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:58:32,517:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:32,545:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:43,867:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:43,958:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:44,008:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:58:44,057:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:44,156:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:44,245:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:44,293:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 10:58:44,333:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 10:58:44,564:INFO:Calculating mean and std
2023-05-06 10:58:44,565:INFO:Creating metrics dataframe
2023-05-06 10:58:44,654:INFO:Uploading results into container
2023-05-06 10:58:44,655:INFO:Uploading model into container now
2023-05-06 10:58:44,655:INFO:_master_model_container: 24
2023-05-06 10:58:44,655:INFO:_display_container: 3
2023-05-06 10:58:44,655:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=123)
2023-05-06 10:58:44,655:INFO:create_model() successfully completed......................................
2023-05-06 10:58:44,903:INFO:SubProcess create_model() end ==================================
2023-05-06 10:58:44,904:INFO:Creating metrics dataframe
2023-05-06 10:58:44,925:INFO:Initializing Gradient Boosting Classifier
2023-05-06 10:58:44,926:INFO:Total runtime is 8.982371362050374 minutes
2023-05-06 10:58:44,934:INFO:SubProcess create_model() called ==================================
2023-05-06 10:58:44,934:INFO:Initializing create_model()
2023-05-06 10:58:44,934:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D4267D120>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 10:58:44,934:INFO:Checking exceptions
2023-05-06 10:58:44,934:INFO:Importing libraries
2023-05-06 10:58:44,934:INFO:Copying training dataset
2023-05-06 10:58:45,063:INFO:Defining folds
2023-05-06 10:58:45,063:INFO:Declaring metric variables
2023-05-06 10:58:45,067:INFO:Importing untrained model
2023-05-06 10:58:45,071:INFO:Gradient Boosting Classifier Imported successfully
2023-05-06 10:58:45,079:INFO:Starting cross validation
2023-05-06 10:58:45,080:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 11:19:49,584:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 2.57s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 11:19:49,845:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 2.73s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 11:19:52,111:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 2.66s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 11:19:52,747:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 2.77s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 11:19:53,875:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 2.45s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 11:19:57,513:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 2.99s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 11:19:57,726:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 2.95s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 11:19:58,929:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:19:58,999:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:19:59,164:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:19:59,260:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:19:59,297:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:19:59,384:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:19:59,411:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:19:59,486:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:20:00,923:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:20:01,119:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:20:01,328:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:20:01,843:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:20:02,061:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:20:02,177:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:20:02,277:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:20:03,180:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:20:03,407:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:20:03,531:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:20:03,583:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 2.55s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 11:20:03,648:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:20:06,896:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:20:07,064:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:20:07,092:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:20:07,185:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:20:07,244:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:20:07,270:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:20:07,436:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:20:10,121:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:20:10,245:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:20:10,314:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:20:10,377:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:27:59,857:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.12s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 11:27:59,973:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.12s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 11:28:03,581:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:03,650:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:03,677:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:03,727:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:28:03,744:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:03,771:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:03,794:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:28:03,837:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:04,133:INFO:Calculating mean and std
2023-05-06 11:28:04,136:INFO:Creating metrics dataframe
2023-05-06 11:28:04,245:INFO:Uploading results into container
2023-05-06 11:28:04,246:INFO:Uploading model into container now
2023-05-06 11:28:04,247:INFO:_master_model_container: 25
2023-05-06 11:28:04,247:INFO:_display_container: 3
2023-05-06 11:28:04,248:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2023-05-06 11:28:04,248:INFO:create_model() successfully completed......................................
2023-05-06 11:28:04,510:INFO:SubProcess create_model() end ==================================
2023-05-06 11:28:04,511:INFO:Creating metrics dataframe
2023-05-06 11:28:04,530:INFO:Initializing Linear Discriminant Analysis
2023-05-06 11:28:04,530:INFO:Total runtime is 38.30910209417343 minutes
2023-05-06 11:28:04,535:INFO:SubProcess create_model() called ==================================
2023-05-06 11:28:04,536:INFO:Initializing create_model()
2023-05-06 11:28:04,536:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D4267D120>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 11:28:04,536:INFO:Checking exceptions
2023-05-06 11:28:04,536:INFO:Importing libraries
2023-05-06 11:28:04,536:INFO:Copying training dataset
2023-05-06 11:28:04,665:INFO:Defining folds
2023-05-06 11:28:04,665:INFO:Declaring metric variables
2023-05-06 11:28:04,669:INFO:Importing untrained model
2023-05-06 11:28:04,674:INFO:Linear Discriminant Analysis Imported successfully
2023-05-06 11:28:04,683:INFO:Starting cross validation
2023-05-06 11:28:04,684:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 11:28:06,018:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:06,132:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:06,232:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:06,340:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:06,343:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:28:06,443:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:06,451:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:28:06,552:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:08,098:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:08,280:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:08,315:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:08,451:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:28:08,525:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:08,555:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:08,644:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:28:08,754:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:16,731:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:16,749:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:16,799:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:16,801:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:16,804:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:16,819:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:16,914:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:16,921:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:16,977:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:16,982:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:16,989:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:17,004:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:17,007:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:28:17,011:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:28:17,068:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:28:17,074:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:28:17,088:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:28:17,100:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:17,100:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:17,112:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:28:17,145:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:17,160:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:17,165:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:17,197:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:18,238:INFO:Calculating mean and std
2023-05-06 11:28:18,239:INFO:Creating metrics dataframe
2023-05-06 11:28:18,335:INFO:Uploading results into container
2023-05-06 11:28:18,336:INFO:Uploading model into container now
2023-05-06 11:28:18,337:INFO:_master_model_container: 26
2023-05-06 11:28:18,337:INFO:_display_container: 3
2023-05-06 11:28:18,337:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2023-05-06 11:28:18,337:INFO:create_model() successfully completed......................................
2023-05-06 11:28:18,589:INFO:SubProcess create_model() end ==================================
2023-05-06 11:28:18,589:INFO:Creating metrics dataframe
2023-05-06 11:28:18,617:INFO:Initializing Extra Trees Classifier
2023-05-06 11:28:18,618:INFO:Total runtime is 38.543895435333255 minutes
2023-05-06 11:28:18,622:INFO:SubProcess create_model() called ==================================
2023-05-06 11:28:18,624:INFO:Initializing create_model()
2023-05-06 11:28:18,624:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D4267D120>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 11:28:18,624:INFO:Checking exceptions
2023-05-06 11:28:18,625:INFO:Importing libraries
2023-05-06 11:28:18,625:INFO:Copying training dataset
2023-05-06 11:28:18,754:INFO:Defining folds
2023-05-06 11:28:18,754:INFO:Declaring metric variables
2023-05-06 11:28:18,758:INFO:Importing untrained model
2023-05-06 11:28:18,764:INFO:Extra Trees Classifier Imported successfully
2023-05-06 11:28:18,770:INFO:Starting cross validation
2023-05-06 11:28:18,771:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 11:28:52,743:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:52,963:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:53,056:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:28:53,060:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:53,118:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:53,189:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:28:53,249:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:28:53,307:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:29:18,556:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.47s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 11:29:19,240:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.67s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 11:29:19,393:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.64s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 11:29:19,603:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.64s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 11:29:19,905:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.63s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 11:29:19,946:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.65s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 11:29:26,508:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:319: UserWarning: Persisting input arguments took 1.81s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-06 11:29:26,883:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:319: UserWarning: Persisting input arguments took 1.84s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-06 11:29:27,079:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:319: UserWarning: Persisting input arguments took 1.73s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-06 11:29:27,258:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:319: UserWarning: Persisting input arguments took 1.91s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-06 11:29:27,857:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:319: UserWarning: Persisting input arguments took 1.51s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-06 11:29:29,463:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:29:29,772:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:29:30,112:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:29:30,225:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:29:30,237:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:29:30,244:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:29:30,302:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:29:30,313:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:29:30,363:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:29:30,450:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:29:30,511:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:29:30,526:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:29:30,538:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:29:30,578:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:29:30,618:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:29:30,730:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:29:30,781:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:29:30,834:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:29:30,874:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:29:30,930:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:29:30,970:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:29:31,084:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:29:33,782:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:29:33,900:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:29:33,963:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:29:34,022:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:29:35,202:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:29:35,315:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:29:35,373:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:29:35,420:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:29:35,673:INFO:Calculating mean and std
2023-05-06 11:29:35,675:INFO:Creating metrics dataframe
2023-05-06 11:29:36,529:INFO:Uploading results into container
2023-05-06 11:29:36,530:INFO:Uploading model into container now
2023-05-06 11:29:36,531:INFO:_master_model_container: 27
2023-05-06 11:29:36,532:INFO:_display_container: 3
2023-05-06 11:29:36,532:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=123, verbose=0, warm_start=False)
2023-05-06 11:29:36,532:INFO:create_model() successfully completed......................................
2023-05-06 11:29:36,844:INFO:SubProcess create_model() end ==================================
2023-05-06 11:29:36,844:INFO:Creating metrics dataframe
2023-05-06 11:29:36,872:INFO:Initializing Extreme Gradient Boosting
2023-05-06 11:29:36,872:INFO:Total runtime is 39.848129189014436 minutes
2023-05-06 11:29:36,877:INFO:SubProcess create_model() called ==================================
2023-05-06 11:29:36,877:INFO:Initializing create_model()
2023-05-06 11:29:36,877:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D4267D120>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 11:29:36,877:INFO:Checking exceptions
2023-05-06 11:29:36,877:INFO:Importing libraries
2023-05-06 11:29:36,878:INFO:Copying training dataset
2023-05-06 11:29:37,117:INFO:Defining folds
2023-05-06 11:29:37,117:INFO:Declaring metric variables
2023-05-06 11:29:37,122:INFO:Importing untrained model
2023-05-06 11:29:37,127:INFO:Extreme Gradient Boosting Imported successfully
2023-05-06 11:29:37,138:INFO:Starting cross validation
2023-05-06 11:29:37,138:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 11:37:37,387:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:37:37,570:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:37:37,768:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:37:40,837:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:37:41,058:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:37:41,243:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:37:43,151:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:37:43,358:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:37:43,564:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:37:44,790:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:37:44,986:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:37:45,173:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:37:45,863:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:37:46,066:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:37:46,269:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:37:46,478:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:37:46,687:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:37:46,909:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:37:48,670:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:37:48,831:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:37:48,919:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:37:48,977:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:37:51,192:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:37:51,340:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:37:51,473:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:41:23,111:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:41:23,224:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:41:23,332:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:41:24,970:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:41:25,079:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:41:25,174:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:41:25,648:INFO:Calculating mean and std
2023-05-06 11:41:25,648:INFO:Creating metrics dataframe
2023-05-06 11:41:25,839:INFO:Uploading results into container
2023-05-06 11:41:25,839:INFO:Uploading model into container now
2023-05-06 11:41:25,839:INFO:_master_model_container: 28
2023-05-06 11:41:25,839:INFO:_display_container: 3
2023-05-06 11:41:25,850:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              n_estimators=100, n_jobs=-1, num_parallel_tree=None,
              objective='binary:logistic', predictor=None, ...)
2023-05-06 11:41:25,850:INFO:create_model() successfully completed......................................
2023-05-06 11:41:26,181:INFO:SubProcess create_model() end ==================================
2023-05-06 11:41:26,181:INFO:Creating metrics dataframe
2023-05-06 11:41:26,212:INFO:Initializing Light Gradient Boosting Machine
2023-05-06 11:41:26,212:INFO:Total runtime is 51.67046364148458 minutes
2023-05-06 11:41:26,227:INFO:SubProcess create_model() called ==================================
2023-05-06 11:41:26,227:INFO:Initializing create_model()
2023-05-06 11:41:26,227:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D4267D120>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 11:41:26,227:INFO:Checking exceptions
2023-05-06 11:41:26,227:INFO:Importing libraries
2023-05-06 11:41:26,227:INFO:Copying training dataset
2023-05-06 11:41:26,416:INFO:Defining folds
2023-05-06 11:41:26,416:INFO:Declaring metric variables
2023-05-06 11:41:26,416:INFO:Importing untrained model
2023-05-06 11:41:26,432:INFO:Light Gradient Boosting Machine Imported successfully
2023-05-06 11:41:26,449:INFO:Starting cross validation
2023-05-06 11:41:26,450:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 11:42:10,704:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.05s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 11:42:11,269:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.99s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 11:42:14,249:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.27s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 11:42:14,486:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.27s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 11:42:15,033:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.35s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 11:42:15,934:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.36s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 11:42:16,200:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.31s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 11:42:19,005:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 2.22s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 11:42:56,696:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:42:57,206:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:42:57,630:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:04,181:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:04,542:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:04,900:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:09,260:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:09,575:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:09,736:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:43:09,860:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:11,924:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:12,162:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:12,210:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:12,293:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:43:12,392:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:12,448:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:12,685:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:14,580:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:14,754:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:14,786:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:14,833:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:43:14,904:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:14,904:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:14,928:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:15,042:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:15,071:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:15,135:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:43:15,198:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:34,859:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.53s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 11:43:44,495:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:44,636:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:44,747:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:45,173:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:45,284:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:45,393:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:45,660:INFO:Calculating mean and std
2023-05-06 11:43:45,660:INFO:Creating metrics dataframe
2023-05-06 11:43:45,788:INFO:Uploading results into container
2023-05-06 11:43:45,788:INFO:Uploading model into container now
2023-05-06 11:43:45,788:INFO:_master_model_container: 29
2023-05-06 11:43:45,788:INFO:_display_container: 3
2023-05-06 11:43:45,788:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2023-05-06 11:43:45,788:INFO:create_model() successfully completed......................................
2023-05-06 11:43:46,101:INFO:SubProcess create_model() end ==================================
2023-05-06 11:43:46,101:INFO:Creating metrics dataframe
2023-05-06 11:43:46,148:INFO:Initializing Dummy Classifier
2023-05-06 11:43:46,148:INFO:Total runtime is 54.00273633003235 minutes
2023-05-06 11:43:46,164:INFO:SubProcess create_model() called ==================================
2023-05-06 11:43:46,164:INFO:Initializing create_model()
2023-05-06 11:43:46,164:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D4267D120>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 11:43:46,164:INFO:Checking exceptions
2023-05-06 11:43:46,164:INFO:Importing libraries
2023-05-06 11:43:46,164:INFO:Copying training dataset
2023-05-06 11:43:46,359:INFO:Defining folds
2023-05-06 11:43:46,359:INFO:Declaring metric variables
2023-05-06 11:43:46,369:INFO:Importing untrained model
2023-05-06 11:43:46,369:INFO:Dummy Classifier Imported successfully
2023-05-06 11:43:46,384:INFO:Starting cross validation
2023-05-06 11:43:46,384:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 11:43:47,253:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:47,253:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:47,304:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:47,304:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:47,304:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:47,317:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:47,348:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:47,348:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:47,411:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:47,427:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:47,460:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:47,460:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:47,474:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:47,474:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:47,493:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:43:47,505:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:47,505:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:43:47,521:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:47,553:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:43:47,560:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:43:47,560:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:43:47,569:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:43:47,571:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:47,587:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:47,587:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:43:47,604:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:43:47,617:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:47,638:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:47,638:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:47,638:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:47,664:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:47,680:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:48,361:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:48,393:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:48,472:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:48,521:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:48,521:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:43:48,567:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:43:48,588:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:48,614:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:43:49,135:INFO:Calculating mean and std
2023-05-06 11:43:49,135:INFO:Creating metrics dataframe
2023-05-06 11:43:49,309:INFO:Uploading results into container
2023-05-06 11:43:49,309:INFO:Uploading model into container now
2023-05-06 11:43:49,309:INFO:_master_model_container: 30
2023-05-06 11:43:49,309:INFO:_display_container: 3
2023-05-06 11:43:49,309:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2023-05-06 11:43:49,309:INFO:create_model() successfully completed......................................
2023-05-06 11:43:49,624:INFO:SubProcess create_model() end ==================================
2023-05-06 11:43:49,624:INFO:Creating metrics dataframe
2023-05-06 11:43:49,705:INFO:Initializing create_model()
2023-05-06 11:43:49,705:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-05-06 11:43:49,705:INFO:Checking exceptions
2023-05-06 11:43:49,705:INFO:Importing libraries
2023-05-06 11:43:49,705:INFO:Copying training dataset
2023-05-06 11:43:49,895:INFO:Defining folds
2023-05-06 11:43:49,895:INFO:Declaring metric variables
2023-05-06 11:43:49,895:INFO:Importing untrained model
2023-05-06 11:43:49,895:INFO:Declaring custom model
2023-05-06 11:43:49,895:INFO:Random Forest Classifier Imported successfully
2023-05-06 11:43:49,895:INFO:Cross validation set to False
2023-05-06 11:43:49,895:INFO:Fitting Model
2023-05-06 11:43:58,302:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2023-05-06 11:43:58,302:INFO:create_model() successfully completed......................................
2023-05-06 11:43:58,698:INFO:_master_model_container: 30
2023-05-06 11:43:58,698:INFO:_display_container: 3
2023-05-06 11:43:58,713:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2023-05-06 11:43:58,713:INFO:compare_models() successfully completed......................................
2023-05-06 11:52:03,689:INFO:Initializing compare_models()
2023-05-06 11:52:03,689:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2023-05-06 11:52:03,689:INFO:Checking exceptions
2023-05-06 11:52:03,789:INFO:Preparing display monitor
2023-05-06 11:52:03,849:INFO:Initializing Logistic Regression
2023-05-06 11:52:03,849:INFO:Total runtime is 0.0 minutes
2023-05-06 11:52:03,861:INFO:SubProcess create_model() called ==================================
2023-05-06 11:52:03,861:INFO:Initializing create_model()
2023-05-06 11:52:03,861:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D487F75B0>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 11:52:03,861:INFO:Checking exceptions
2023-05-06 11:52:03,861:INFO:Importing libraries
2023-05-06 11:52:03,861:INFO:Copying training dataset
2023-05-06 11:52:04,089:INFO:Defining folds
2023-05-06 11:52:04,089:INFO:Declaring metric variables
2023-05-06 11:52:04,089:INFO:Importing untrained model
2023-05-06 11:52:04,102:INFO:Logistic Regression Imported successfully
2023-05-06 11:52:04,114:INFO:Starting cross validation
2023-05-06 11:52:04,114:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 11:55:51,721:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-06 11:55:52,391:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-06 11:55:52,944:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:55:53,188:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:55:53,311:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:55:53,336:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:55:53,427:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:55:53,612:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:55:53,739:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:55:53,867:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:55:54,172:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-06 11:55:55,345:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-06 11:55:55,615:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:55:55,980:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:55:56,082:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-06 11:55:56,145:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:55:56,261:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:55:56,492:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:55:57,052:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:55:57,239:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:55:57,398:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:55:57,542:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:55:57,862:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:55:58,074:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:55:58,228:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:55:59,950:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-06 11:56:00,702:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:56:01,023:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:56:01,243:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:56:01,433:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:56:01,899:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-06 11:56:02,518:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:56:02,743:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:56:02,850:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:56:02,941:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:56:03,005:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-06 11:56:03,492:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:56:03,636:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:56:03,703:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:56:03,766:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:44,291:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-06 11:57:44,620:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:44,719:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:44,784:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:57:44,860:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:46,146:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-06 11:57:46,397:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:46,495:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:46,548:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:57:46,595:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:46,830:INFO:Calculating mean and std
2023-05-06 11:57:46,832:INFO:Creating metrics dataframe
2023-05-06 11:57:46,955:INFO:Uploading results into container
2023-05-06 11:57:46,956:INFO:Uploading model into container now
2023-05-06 11:57:46,956:INFO:_master_model_container: 31
2023-05-06 11:57:46,957:INFO:_display_container: 4
2023-05-06 11:57:46,957:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-05-06 11:57:46,958:INFO:create_model() successfully completed......................................
2023-05-06 11:57:47,264:INFO:SubProcess create_model() end ==================================
2023-05-06 11:57:47,264:INFO:Creating metrics dataframe
2023-05-06 11:57:47,284:INFO:Initializing K Neighbors Classifier
2023-05-06 11:57:47,285:INFO:Total runtime is 5.723929901917775 minutes
2023-05-06 11:57:47,292:INFO:SubProcess create_model() called ==================================
2023-05-06 11:57:47,293:INFO:Initializing create_model()
2023-05-06 11:57:47,294:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D487F75B0>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 11:57:47,294:INFO:Checking exceptions
2023-05-06 11:57:47,294:INFO:Importing libraries
2023-05-06 11:57:47,294:INFO:Copying training dataset
2023-05-06 11:57:47,482:INFO:Defining folds
2023-05-06 11:57:47,482:INFO:Declaring metric variables
2023-05-06 11:57:47,488:INFO:Importing untrained model
2023-05-06 11:57:47,494:INFO:K Neighbors Classifier Imported successfully
2023-05-06 11:57:47,504:INFO:Starting cross validation
2023-05-06 11:57:47,505:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 11:57:50,709:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:50,721:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:50,794:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:50,797:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:50,817:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:50,873:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:50,886:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:50,888:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:50,900:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:50,917:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:50,970:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:50,972:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:50,982:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:57:50,986:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:50,996:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:57:51,038:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:51,057:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:51,061:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:57:51,063:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:51,078:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:51,078:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:57:51,088:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:51,141:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:51,143:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:51,145:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:57:51,157:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:51,179:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:57:51,205:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:51,225:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:51,256:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:53,141:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:53,146:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:53,252:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:53,258:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:53,372:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:53,383:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:53,800:INFO:Calculating mean and std
2023-05-06 11:57:53,802:INFO:Creating metrics dataframe
2023-05-06 11:57:53,943:INFO:Uploading results into container
2023-05-06 11:57:53,945:INFO:Uploading model into container now
2023-05-06 11:57:53,945:INFO:_master_model_container: 32
2023-05-06 11:57:53,946:INFO:_display_container: 4
2023-05-06 11:57:53,946:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2023-05-06 11:57:53,946:INFO:create_model() successfully completed......................................
2023-05-06 11:57:54,247:INFO:SubProcess create_model() end ==================================
2023-05-06 11:57:54,247:INFO:Creating metrics dataframe
2023-05-06 11:57:54,281:INFO:Initializing Naive Bayes
2023-05-06 11:57:54,282:INFO:Total runtime is 5.840549572308858 minutes
2023-05-06 11:57:54,291:INFO:SubProcess create_model() called ==================================
2023-05-06 11:57:54,292:INFO:Initializing create_model()
2023-05-06 11:57:54,292:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D487F75B0>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 11:57:54,293:INFO:Checking exceptions
2023-05-06 11:57:54,293:INFO:Importing libraries
2023-05-06 11:57:54,293:INFO:Copying training dataset
2023-05-06 11:57:54,497:INFO:Defining folds
2023-05-06 11:57:54,497:INFO:Declaring metric variables
2023-05-06 11:57:54,506:INFO:Importing untrained model
2023-05-06 11:57:54,513:INFO:Naive Bayes Imported successfully
2023-05-06 11:57:54,526:INFO:Starting cross validation
2023-05-06 11:57:54,527:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 11:57:55,907:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:55,973:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:55,973:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:55,980:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:56,011:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:56,022:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:56,029:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:56,042:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:56,094:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:56,142:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:56,145:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:56,146:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:56,182:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:56,187:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:57:56,195:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:56,197:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:56,211:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:56,230:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:57:56,236:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:57:56,237:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:57:56,266:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:56,274:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:57:56,286:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:57:56,290:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:57:56,298:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:57:56,305:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:56,310:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:56,314:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:56,349:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:56,365:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:56,366:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:56,377:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:57,269:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:57,269:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:57,369:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:57,382:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:57,434:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:57:57,437:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:57:57,485:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:57,492:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:57:57,952:INFO:Calculating mean and std
2023-05-06 11:57:57,956:INFO:Creating metrics dataframe
2023-05-06 11:57:58,114:INFO:Uploading results into container
2023-05-06 11:57:58,115:INFO:Uploading model into container now
2023-05-06 11:57:58,116:INFO:_master_model_container: 33
2023-05-06 11:57:58,116:INFO:_display_container: 4
2023-05-06 11:57:58,116:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2023-05-06 11:57:58,117:INFO:create_model() successfully completed......................................
2023-05-06 11:57:58,391:INFO:SubProcess create_model() end ==================================
2023-05-06 11:57:58,392:INFO:Creating metrics dataframe
2023-05-06 11:57:58,413:INFO:Initializing Decision Tree Classifier
2023-05-06 11:57:58,414:INFO:Total runtime is 5.909412793318431 minutes
2023-05-06 11:57:58,421:INFO:SubProcess create_model() called ==================================
2023-05-06 11:57:58,422:INFO:Initializing create_model()
2023-05-06 11:57:58,423:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D487F75B0>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 11:57:58,423:INFO:Checking exceptions
2023-05-06 11:57:58,423:INFO:Importing libraries
2023-05-06 11:57:58,423:INFO:Copying training dataset
2023-05-06 11:57:58,591:INFO:Defining folds
2023-05-06 11:57:58,592:INFO:Declaring metric variables
2023-05-06 11:57:58,598:INFO:Importing untrained model
2023-05-06 11:57:58,605:INFO:Decision Tree Classifier Imported successfully
2023-05-06 11:57:58,617:INFO:Starting cross validation
2023-05-06 11:57:58,619:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 11:58:00,740:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:00,745:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:00,748:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:00,754:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:00,822:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:00,827:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:00,862:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:00,893:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:00,907:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:00,910:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:00,913:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:00,921:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:00,982:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:00,994:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:58:01,003:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:01,003:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:58:01,008:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:58:01,024:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:01,052:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:01,069:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:01,070:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:58:01,075:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:01,080:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:01,083:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:01,109:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:58:01,138:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:58:01,143:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:01,170:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:01,184:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:01,216:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:02,578:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:02,675:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:02,711:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:02,724:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:58:02,767:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:02,807:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:02,965:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:03,241:INFO:Calculating mean and std
2023-05-06 11:58:03,243:INFO:Creating metrics dataframe
2023-05-06 11:58:03,390:INFO:Uploading results into container
2023-05-06 11:58:03,391:INFO:Uploading model into container now
2023-05-06 11:58:03,392:INFO:_master_model_container: 34
2023-05-06 11:58:03,392:INFO:_display_container: 4
2023-05-06 11:58:03,393:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=123, splitter='best')
2023-05-06 11:58:03,393:INFO:create_model() successfully completed......................................
2023-05-06 11:58:03,662:INFO:SubProcess create_model() end ==================================
2023-05-06 11:58:03,662:INFO:Creating metrics dataframe
2023-05-06 11:58:03,688:INFO:Initializing SVM - Linear Kernel
2023-05-06 11:58:03,688:INFO:Total runtime is 5.997314874331157 minutes
2023-05-06 11:58:03,697:INFO:SubProcess create_model() called ==================================
2023-05-06 11:58:03,698:INFO:Initializing create_model()
2023-05-06 11:58:03,699:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D487F75B0>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 11:58:03,699:INFO:Checking exceptions
2023-05-06 11:58:03,699:INFO:Importing libraries
2023-05-06 11:58:03,699:INFO:Copying training dataset
2023-05-06 11:58:03,863:INFO:Defining folds
2023-05-06 11:58:03,863:INFO:Declaring metric variables
2023-05-06 11:58:03,870:INFO:Importing untrained model
2023-05-06 11:58:03,877:INFO:SVM - Linear Kernel Imported successfully
2023-05-06 11:58:03,889:INFO:Starting cross validation
2023-05-06 11:58:03,890:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 11:58:58,589:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1236, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-06 11:58:58,744:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:58,861:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1236, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-06 11:58:58,986:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:59,031:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:59,114:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1236, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-06 11:58:59,189:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:58:59,238:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:59,320:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:59,322:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:59,425:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:58:59,438:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:59,451:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1236, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-06 11:58:59,499:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:59,529:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:58:59,531:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1236, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-06 11:58:59,537:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:59,609:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:59,612:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:59,736:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:59,796:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:59,820:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1236, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-06 11:58:59,842:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:58:59,888:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:58:59,908:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:59,933:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:58:59,974:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:00,103:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:00,277:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:59:00,454:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:01,554:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1236, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-06 11:59:01,790:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:01,938:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1236, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-06 11:59:02,248:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:02,409:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:02,708:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:59:02,760:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:02,989:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:03,040:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:59:03,287:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:13,190:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1236, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-06 11:59:13,249:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:13,377:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:13,402:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1236, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-06 11:59:13,431:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:59:13,447:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:13,478:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:13,558:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:13,644:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:59:13,700:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:13,955:INFO:Calculating mean and std
2023-05-06 11:59:13,956:INFO:Creating metrics dataframe
2023-05-06 11:59:14,095:INFO:Uploading results into container
2023-05-06 11:59:14,096:INFO:Uploading model into container now
2023-05-06 11:59:14,097:INFO:_master_model_container: 35
2023-05-06 11:59:14,097:INFO:_display_container: 4
2023-05-06 11:59:14,098:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2023-05-06 11:59:14,098:INFO:create_model() successfully completed......................................
2023-05-06 11:59:14,371:INFO:SubProcess create_model() end ==================================
2023-05-06 11:59:14,372:INFO:Creating metrics dataframe
2023-05-06 11:59:14,404:INFO:Initializing Ridge Classifier
2023-05-06 11:59:14,404:INFO:Total runtime is 7.175910063584646 minutes
2023-05-06 11:59:14,412:INFO:SubProcess create_model() called ==================================
2023-05-06 11:59:14,413:INFO:Initializing create_model()
2023-05-06 11:59:14,413:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D487F75B0>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 11:59:14,413:INFO:Checking exceptions
2023-05-06 11:59:14,413:INFO:Importing libraries
2023-05-06 11:59:14,413:INFO:Copying training dataset
2023-05-06 11:59:14,560:INFO:Defining folds
2023-05-06 11:59:14,561:INFO:Declaring metric variables
2023-05-06 11:59:14,568:INFO:Importing untrained model
2023-05-06 11:59:14,575:INFO:Ridge Classifier Imported successfully
2023-05-06 11:59:14,586:INFO:Starting cross validation
2023-05-06 11:59:14,588:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 11:59:15,698:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-06 11:59:15,735:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-06 11:59:15,755:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-06 11:59:15,774:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-06 11:59:15,780:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:15,782:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-06 11:59:15,795:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-06 11:59:15,812:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-06 11:59:15,817:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:15,827:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-06 11:59:15,834:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:15,851:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:15,858:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:15,868:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:15,885:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:15,897:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:15,942:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:15,984:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:16,003:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:16,013:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:16,021:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:16,027:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:16,028:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:59:16,049:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:16,055:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:16,068:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:59:16,092:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:59:16,100:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:59:16,104:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:16,106:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:59:16,113:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:59:16,138:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:59:16,142:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:59:16,146:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:16,165:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:16,176:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:16,181:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:16,190:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:16,216:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:16,216:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:16,983:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-06 11:59:17,005:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-06 11:59:17,039:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:17,066:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:17,170:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:17,177:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:17,227:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:59:17,237:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 11:59:17,284:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:17,291:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 11:59:17,830:INFO:Calculating mean and std
2023-05-06 11:59:17,832:INFO:Creating metrics dataframe
2023-05-06 11:59:17,948:INFO:Uploading results into container
2023-05-06 11:59:17,949:INFO:Uploading model into container now
2023-05-06 11:59:17,949:INFO:_master_model_container: 36
2023-05-06 11:59:17,950:INFO:_display_container: 4
2023-05-06 11:59:17,950:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2023-05-06 11:59:17,950:INFO:create_model() successfully completed......................................
2023-05-06 11:59:18,232:INFO:SubProcess create_model() end ==================================
2023-05-06 11:59:18,232:INFO:Creating metrics dataframe
2023-05-06 11:59:18,262:INFO:Initializing Random Forest Classifier
2023-05-06 11:59:18,262:INFO:Total runtime is 7.240204068024954 minutes
2023-05-06 11:59:18,269:INFO:SubProcess create_model() called ==================================
2023-05-06 11:59:18,270:INFO:Initializing create_model()
2023-05-06 11:59:18,270:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D487F75B0>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 11:59:18,271:INFO:Checking exceptions
2023-05-06 11:59:18,271:INFO:Importing libraries
2023-05-06 11:59:18,271:INFO:Copying training dataset
2023-05-06 11:59:18,431:INFO:Defining folds
2023-05-06 11:59:18,432:INFO:Declaring metric variables
2023-05-06 11:59:18,438:INFO:Importing untrained model
2023-05-06 11:59:18,445:INFO:Random Forest Classifier Imported successfully
2023-05-06 11:59:18,457:INFO:Starting cross validation
2023-05-06 11:59:18,459:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 12:00:04,659:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:04,800:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:04,918:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:07,910:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.75s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 12:00:08,488:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.63s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 12:00:09,598:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.77s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 12:00:09,652:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.82s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 12:00:09,856:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.87s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 12:00:10,058:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.78s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 12:00:10,122:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.68s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 12:00:11,146:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:319: UserWarning: Persisting input arguments took 0.68s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-06 12:00:11,169:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 0.59s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-06 12:00:13,428:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:13,674:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:13,690:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:13,870:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:13,901:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:13,994:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:00:14,174:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:15,986:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:16,032:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:16,056:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:16,238:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:16,324:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:16,483:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:16,504:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:16,517:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:16,665:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:16,724:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:00:16,761:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:16,869:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:16,894:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:16,907:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:16,970:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:00:17,028:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:17,058:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:21,857:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:22,136:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:22,233:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:00:22,342:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:25,875:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:25,967:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:26,011:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:00:26,051:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:26,272:INFO:Calculating mean and std
2023-05-06 12:00:26,274:INFO:Creating metrics dataframe
2023-05-06 12:00:26,403:INFO:Uploading results into container
2023-05-06 12:00:26,404:INFO:Uploading model into container now
2023-05-06 12:00:26,404:INFO:_master_model_container: 37
2023-05-06 12:00:26,404:INFO:_display_container: 4
2023-05-06 12:00:26,405:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2023-05-06 12:00:26,406:INFO:create_model() successfully completed......................................
2023-05-06 12:00:26,694:INFO:SubProcess create_model() end ==================================
2023-05-06 12:00:26,694:INFO:Creating metrics dataframe
2023-05-06 12:00:26,909:INFO:Initializing Quadratic Discriminant Analysis
2023-05-06 12:00:26,909:INFO:Total runtime is 8.384325635433198 minutes
2023-05-06 12:00:26,923:INFO:SubProcess create_model() called ==================================
2023-05-06 12:00:26,924:INFO:Initializing create_model()
2023-05-06 12:00:26,925:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D487F75B0>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 12:00:26,925:INFO:Checking exceptions
2023-05-06 12:00:26,925:INFO:Importing libraries
2023-05-06 12:00:26,925:INFO:Copying training dataset
2023-05-06 12:00:27,137:INFO:Defining folds
2023-05-06 12:00:27,138:INFO:Declaring metric variables
2023-05-06 12:00:27,146:INFO:Importing untrained model
2023-05-06 12:00:27,153:INFO:Quadratic Discriminant Analysis Imported successfully
2023-05-06 12:00:27,163:INFO:Starting cross validation
2023-05-06 12:00:27,166:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 12:00:27,737:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-06 12:00:27,747:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-06 12:00:27,761:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-06 12:00:27,805:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-06 12:00:27,822:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-06 12:00:27,840:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-06 12:00:27,862:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-06 12:00:27,882:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-06 12:00:28,414:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:28,480:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:28,491:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:28,500:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:28,503:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:28,525:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:28,559:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:28,579:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:28,633:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:28,648:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:28,657:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:28,660:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:00:28,660:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:28,664:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:28,677:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:28,714:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:28,716:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:00:28,730:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:00:28,731:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:28,738:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:00:28,744:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:00:28,746:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:00:28,760:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:00:28,785:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:28,794:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:00:28,800:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:28,813:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:28,819:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:28,820:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:28,827:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:28,865:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:29,327:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-06 12:00:29,339:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-06 12:00:29,672:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:29,714:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:29,756:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:29,800:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:00:29,838:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:29,839:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:29,904:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:00:29,968:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:30,247:INFO:Calculating mean and std
2023-05-06 12:00:30,248:INFO:Creating metrics dataframe
2023-05-06 12:00:30,392:INFO:Uploading results into container
2023-05-06 12:00:30,393:INFO:Uploading model into container now
2023-05-06 12:00:30,394:INFO:_master_model_container: 38
2023-05-06 12:00:30,394:INFO:_display_container: 4
2023-05-06 12:00:30,395:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2023-05-06 12:00:30,396:INFO:create_model() successfully completed......................................
2023-05-06 12:00:30,665:INFO:SubProcess create_model() end ==================================
2023-05-06 12:00:30,665:INFO:Creating metrics dataframe
2023-05-06 12:00:30,708:INFO:Initializing Ada Boost Classifier
2023-05-06 12:00:30,709:INFO:Total runtime is 8.447664678096773 minutes
2023-05-06 12:00:30,721:INFO:SubProcess create_model() called ==================================
2023-05-06 12:00:30,722:INFO:Initializing create_model()
2023-05-06 12:00:30,723:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D487F75B0>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 12:00:30,723:INFO:Checking exceptions
2023-05-06 12:00:30,724:INFO:Importing libraries
2023-05-06 12:00:30,724:INFO:Copying training dataset
2023-05-06 12:00:30,924:INFO:Defining folds
2023-05-06 12:00:30,924:INFO:Declaring metric variables
2023-05-06 12:00:30,931:INFO:Importing untrained model
2023-05-06 12:00:30,937:INFO:Ada Boost Classifier Imported successfully
2023-05-06 12:00:30,945:INFO:Starting cross validation
2023-05-06 12:00:30,947:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 12:00:56,262:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:56,450:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:56,554:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:00:56,662:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:57,222:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:57,347:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:57,421:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:00:57,485:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:57,667:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:57,796:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:57,851:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:57,947:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:00:57,966:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:57,973:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:58,011:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:58,083:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:00:58,165:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:58,168:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:58,252:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:00:58,332:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:59,058:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:59,300:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:59,308:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:59,474:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:00:59,522:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:59,535:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:59,544:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:59,630:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:00:59,722:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:59,729:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:00:59,807:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:00:59,889:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:01:12,193:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:01:12,287:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:01:12,298:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:01:12,332:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:01:12,371:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:01:12,383:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:01:12,447:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:01:12,485:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:01:12,762:INFO:Calculating mean and std
2023-05-06 12:01:12,763:INFO:Creating metrics dataframe
2023-05-06 12:01:12,881:INFO:Uploading results into container
2023-05-06 12:01:12,882:INFO:Uploading model into container now
2023-05-06 12:01:12,883:INFO:_master_model_container: 39
2023-05-06 12:01:12,883:INFO:_display_container: 4
2023-05-06 12:01:12,883:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=123)
2023-05-06 12:01:12,883:INFO:create_model() successfully completed......................................
2023-05-06 12:01:13,158:INFO:SubProcess create_model() end ==================================
2023-05-06 12:01:13,159:INFO:Creating metrics dataframe
2023-05-06 12:01:13,186:INFO:Initializing Gradient Boosting Classifier
2023-05-06 12:01:13,186:INFO:Total runtime is 9.155605602264407 minutes
2023-05-06 12:01:13,195:INFO:SubProcess create_model() called ==================================
2023-05-06 12:01:13,196:INFO:Initializing create_model()
2023-05-06 12:01:13,196:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000024D4DD14CD0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024D487F75B0>, model_only=True, return_train_score=False, kwargs={})
2023-05-06 12:01:13,197:INFO:Checking exceptions
2023-05-06 12:01:13,197:INFO:Importing libraries
2023-05-06 12:01:13,197:INFO:Copying training dataset
2023-05-06 12:01:13,360:INFO:Defining folds
2023-05-06 12:01:13,361:INFO:Declaring metric variables
2023-05-06 12:01:13,367:INFO:Importing untrained model
2023-05-06 12:01:13,373:INFO:Gradient Boosting Classifier Imported successfully
2023-05-06 12:01:13,398:INFO:Starting cross validation
2023-05-06 12:01:13,402:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-06 12:23:45,095:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 3.42s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 12:23:47,169:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 3.38s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 12:23:54,099:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 3.79s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 12:23:55,180:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:23:55,482:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:23:55,634:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:23:55,756:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:23:56,321:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 3.38s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 12:23:56,878:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 4.16s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 12:23:57,598:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:23:57,907:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:23:58,070:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:23:58,201:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:24:01,889:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 3.54s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 12:24:03,558:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 3.27s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 12:24:04,703:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:24:04,951:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:24:05,200:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:24:06,757:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:24:06,972:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:24:07,088:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:24:07,184:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:24:07,584:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:24:07,814:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:24:07,929:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:24:08,012:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:24:11,448:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:24:11,927:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:24:12,058:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:24:12,157:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:24:12,785:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:24:12,994:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:24:13,215:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:24:14,265:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 2.92s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-06 12:24:19,414:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:24:19,588:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 12:24:19,704:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-06 12:24:19,796:WARNING:c:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'western') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-06 13:18:09,344:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-06 13:18:09,348:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-06 13:18:09,348:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-06 13:18:09,349:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-06 13:18:11,750:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
